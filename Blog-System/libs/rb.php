<?php  namespace RedBeanPHP{interface Logger{public function log();}}namespace RedBeanPHP\Logger{use RedBeanPHP\Logger as Logger;use RedBeanPHP\RedException as RedException;use RedBeanPHP\RedException\Security as Security;class RDefault implements Logger{const C_LOGGER_ECHO=0;const C_LOGGER_ARRAY=1;protected $mode=0;protected $logs=array();public function log(){if(func_num_args()<1)return;foreach(func_get_args()as $argument){if(is_array($argument)){$log=print_r($argument,TRUE);if($this->mode===self::C_LOGGER_ECHO){echo $log;}else{$this->logs[]=$log;}}else{if($this->mode===self::C_LOGGER_ECHO){echo $argument;}else{$this->logs[]=$argument;}}if($this->mode===self::C_LOGGER_ECHO)echo "<br>\n";}}public function getLogs(){return $this->logs;}public function clear(){$this->logs=array();return $this;}public function setMode($mode){if($mode!==self::C_LOGGER_ARRAY&&$mode!==self::C_LOGGER_ECHO){throw new RedException('Invalid mode selected for logger, use C_LOGGER_ARRAY or C_LOGGER_ECHO.');}$this->mode=$mode;return $this;}public function grep($needle){$found=array();foreach($this->logs as $logEntry){if(strpos($logEntry,$needle)!==FALSE)$found[]=$logEntry;}return $found;}}}namespace RedBeanPHP\Logger\RDefault{use RedBeanPHP\Logger as Logger;use RedBeanPHP\Logger\RDefault as RDefault;use RedBeanPHP\RedException as RedException;use RedBeanPHP\RedException\Security as Security;class Debug extends RDefault implements Logger{private $strLen=40;private function writeQuery($newSql,$newBindings){uksort($newBindings,function($a,$b){return(strlen($b)-strlen($a));});$newStr=$newSql;foreach($newBindings as $slot=>$value){if(strpos($slot,':')===0){$newStr=str_replace($slot,$this->fillInValue($value),$newStr);}}return $newStr;}protected function fillInValue($value){if(is_null($value))$value='NULL';$value=strval($value);if(strlen($value)>($this->strLen)){$value=substr($value,0,($this->strLen)).'... ';}if(!is_numeric($value)&&$value!=='NULL'){$value='\''.$value.'\'';}return $value;}protected function output($str){$this->logs[]=$str;if(!$this->mode)echo $str.'<br />';}protected function normalizeSlots($sql){$i=0;$newSql=$sql;while($i<20&&strpos($newSql,'?')!==FALSE){$pos=strpos($newSql,'?');$slot=':slot'.$i;$begin=substr($newSql,0,$pos);$end=substr($newSql,$pos+1);$newSql=$begin.$slot.$end;$i++;}return $newSql;}protected function normalizeBindings($bindings){$i=0;$newBindings=array();foreach($bindings as $key=>$value){if(is_numeric($key)){$newKey=':slot'.$i;$newBindings[$newKey]=$value;$i++;}else{$newBindings[$key]=$value;}}return $newBindings;}public function log(){if(func_num_args()<1)return;$sql=func_get_arg(0);if(func_num_args()<2){$bindings=array();}else{$bindings=func_get_arg(1);}if(!is_array($bindings)){return $this->output($sql);}$newSql=$this->normalizeSlots($sql);$newBindings=$this->normalizeBindings($bindings);$newStr=$this->writeQuery($newSql,$newBindings);$this->output($newStr);}public function setParamStringLength($len=20){$this->strLen=max(0,$len);return $this;}}}namespace RedBeanPHP{interface Driver{public function GetAll($sql,$bindings=array());public function GetCol($sql,$bindings=array());public function GetOne($sql,$bindings=array());public function GetAssocRow($sql,$bindings=array());public function GetRow($sql,$bindings=array());public function Execute($sql,$bindings=array());public function GetInsertID();public function Affected_Rows();public function GetCursor($sql,$bindings=array());public function setDebugMode($tf);public function CommitTrans();public function StartTrans();public function FailTrans();public function resetCounter();public function getQueryCount();}}namespace RedBeanPHP\Driver{use RedBeanPHP\Driver as Driver;use RedBeanPHP\Logger as Logger;use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\RedException\SQL as SQL;use RedBeanPHP\Logger\RDefault as RDefault;use RedBeanPHP\PDOCompatible as PDOCompatible;use RedBeanPHP\Cursor\PDOCursor as PDOCursor;class RPDO implements Driver{protected $max;protected $dsn;protected $loggingEnabled=FALSE;protected $logger=NULL;protected $pdo;protected $affectedRows;protected $resultArray;protected $connectInfo=array();protected $isConnected=FALSE;protected $flagUseStringOnlyBinding=FALSE;protected $queryCounter=0;protected $mysqlEncoding='';protected function bindParams($statement,$bindings){foreach($bindings as $key=>&$value){if(is_integer($key)){if(is_null($value)){$statement->bindValue($key+1,NULL,\PDO::PARAM_NULL);}elseif(!$this->flagUseStringOnlyBinding&&AQueryWriter::canBeTreatedAsInt($value)&&abs($value)<=$this->max){$statement->bindParam($key+1,$value,\PDO::PARAM_INT);}else{$statement->bindParam($key+1,$value,\PDO::PARAM_STR);}}else{if(is_null($value)){$statement->bindValue($key,NULL,\PDO::PARAM_NULL);}elseif(!$this->flagUseStringOnlyBinding&&AQueryWriter::canBeTreatedAsInt($value)&&abs($value)<=$this->max){$statement->bindParam($key,$value,\PDO::PARAM_INT);}else{$statement->bindParam($key,$value,\PDO::PARAM_STR);}}}}protected function runQuery($sql,$bindings,$options=array()){$this->connect();if($this->loggingEnabled&&$this->logger){$this->logger->log($sql,$bindings);}try{if(strpos('pgsql',$this->dsn)===0){$statement=$this->pdo->prepare($sql,array(\PDO::PGSQL_ATTR_DISABLE_NATIVE_PREPARED_STATEMENT=>TRUE));}else{$statement=$this->pdo->prepare($sql);}$this->bindParams($statement,$bindings);$statement->execute();$this->queryCounter++;$this->affectedRows=$statement->rowCount();if($statement->columnCount()){$fetchStyle=(isset($options['fetchStyle']))?$options['fetchStyle']:NULL;if(isset($options['noFetch'])&&$options['noFetch']){$this->resultArray=array();return $statement;}$this->resultArray=$statement->fetchAll($fetchStyle);if($this->loggingEnabled&&$this->logger){$this->logger->log('resultset: '.count($this->resultArray).' rows');}}else{$this->resultArray=array();}}catch(\PDOException $e){$err=$e->getMessage();if($this->loggingEnabled&&$this->logger)$this->logger->log('An error occurred: '.$err);$exception=new SQL($err,0);$exception->setSQLState($e->getCode());throw $exception;}}protected function setEncoding(){$driver=$this->pdo->getAttribute(\PDO::ATTR_DRIVER_NAME);$version=floatval($this->pdo->getAttribute(\PDO::ATTR_SERVER_VERSION));if($driver==='mysql'){$encoding=($version>=5.5)?'utf8mb4':'utf8';$this->pdo->setAttribute(\PDO::MYSQL_ATTR_INIT_COMMAND,'SET NAMES '.$encoding);$this->pdo->exec(' SET NAMES '.$encoding);$this->mysqlEncoding=$encoding;}}public function __construct($dsn,$user=NULL,$pass=NULL){if(is_object($dsn)){$this->pdo=$dsn;$this->isConnected=TRUE;$this->setEncoding();$this->pdo->setAttribute(\PDO::ATTR_ERRMODE,\PDO::ERRMODE_EXCEPTION);$this->pdo->setAttribute(\PDO::ATTR_DEFAULT_FETCH_MODE,\PDO::FETCH_ASSOC);$this->dsn=$this->getDatabaseType();}else{$this->dsn=$dsn;$this->connectInfo=array('pass'=>$pass,'user'=>$user);}if((strpos($this->dsn,'sqlite')===0&&PHP_MAJOR_VERSION===5&&PHP_MINOR_VERSION===3)||$this->dsn==='test-sqlite-53'){$this->max=2147483647;}elseif(strpos($this->dsn,'cubrid')===0){$this->max=2147483647;}else{$this->max=PHP_INT_MAX;}}public function getMysqlEncoding(){return $this->mysqlEncoding;}public function setUseStringOnlyBinding($yesNo){$this->flagUseStringOnlyBinding=(boolean) $yesNo;}public function connect(){if($this->isConnected)return;try{$user=$this->connectInfo['user'];$pass=$this->connectInfo['pass'];$this->pdo=new\PDO($this->dsn,$user,$pass);$this->setEncoding();$this->pdo->setAttribute(\PDO::ATTR_STRINGIFY_FETCHES,TRUE);$this->pdo->setAttribute(\PDO::ATTR_ERRMODE,\PDO::ERRMODE_EXCEPTION);$this->pdo->setAttribute(\PDO::ATTR_DEFAULT_FETCH_MODE,\PDO::FETCH_ASSOC);$this->isConnected=TRUE;}catch(\PDOException $exception){$matches=array();$dbname=(preg_match('/dbname=(\w+)/',$this->dsn,$matches))?$matches[1]:'?';throw new\PDOException('Could not connect to database ('.$dbname.').',$exception->getCode());}}public function setPDO(\PDO $pdo){$this->pdo=$pdo;}public function GetAll($sql,$bindings=array()){$this->runQuery($sql,$bindings);return $this->resultArray;}public function GetAssocRow($sql,$bindings=array()){$this->runQuery($sql,$bindings,array('fetchStyle'=>\PDO::FETCH_ASSOC));return $this->resultArray;}public function GetCol($sql,$bindings=array()){$rows=$this->GetAll($sql,$bindings);$cols=array();if($rows&&is_array($rows)&&count($rows)>0){foreach($rows as $row){$cols[]=array_shift($row);}}return $cols;}public function GetOne($sql,$bindings=array()){$arr=$this->GetAll($sql,$bindings);$res=NULL;if(!is_array($arr))return NULL;if(count($arr)===0)return NULL;$row1=array_shift($arr);if(!is_array($row1))return NULL;if(count($row1)===0)return NULL;$col1=array_shift($row1);return $col1;}public function GetCell($sql,$bindings=array()){return $this->GetOne($sql,$bindings);}public function GetRow($sql,$bindings=array()){$arr=$this->GetAll($sql,$bindings);return array_shift($arr);}public function Execute($sql,$bindings=array()){$this->runQuery($sql,$bindings);return $this->affectedRows;}public function GetInsertID(){$this->connect();return (int) $this->pdo->lastInsertId();}public function GetCursor($sql,$bindings=array()){$statement=$this->runQuery($sql,$bindings,array('noFetch'=>TRUE));$cursor=new PDOCursor($statement,\PDO::FETCH_ASSOC);return $cursor;}public function Affected_Rows(){$this->connect();return (int) $this->affectedRows;}public function setDebugMode($tf,$logger=NULL){$this->connect();$this->loggingEnabled=(bool) $tf;if($this->loggingEnabled and!$logger){$logger=new RDefault();}$this->setLogger($logger);}public function setLogger(Logger $logger){$this->logger=$logger;}public function getLogger(){return $this->logger;}public function StartTrans(){$this->connect();$this->pdo->beginTransaction();}public function CommitTrans(){$this->connect();$this->pdo->commit();}public function FailTrans(){$this->connect();$this->pdo->rollback();}public function getDatabaseType(){$this->connect();return $this->pdo->getAttribute(\PDO::ATTR_DRIVER_NAME);}public function getDatabaseVersion(){$this->connect();return $this->pdo->getAttribute(\PDO::ATTR_CLIENT_VERSION);}public function getPDO(){$this->connect();return $this->pdo;}public function close(){$this->pdo=NULL;$this->isConnected=FALSE;}public function isConnected(){return $this->isConnected&&$this->pdo;}public function setEnableLogging($enable){$this->loggingEnabled=(boolean) $enable;}public function resetCounter(){$this->queryCounter=0;return $this;}public function getQueryCount(){return $this->queryCounter;}public function getIntegerBindingMax(){return $this->max;}}}namespace RedBeanPHP{use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\BeanHelper as BeanHelper;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\RedException as RedException;use RedBeanPHP\OODBBean as OODBBean;class OODBBean implements\IteratorAggregate,\ArrayAccess,\Countable{const C_ERR_IGNORE=FALSE;const C_ERR_LOG=1;const C_ERR_NOTICE=2;const C_ERR_WARN=3;const C_ERR_EXCEPTION=4;const C_ERR_FUNC=5;const C_ERR_FATAL=6;protected static $errorHandlingFUSE=FALSE;protected static $errorHandler=NULL;protected static $aliases=array();protected static $autoResolve=FALSE;public static function setErrorHandlingFUSE($mode,$func=NULL){if($mode!==self::C_ERR_IGNORE&&$mode!==self::C_ERR_LOG&&$mode!==self::C_ERR_NOTICE&&$mode!==self::C_ERR_WARN&&$mode!==self::C_ERR_EXCEPTION&&$mode!==self::C_ERR_FUNC&&$mode!==self::C_ERR_FATAL)throw new\Exception('Invalid error mode selected');if($mode===self::C_ERR_FUNC&&!is_callable($func)){throw new\Exception('Invalid error handler');}$old=array(self::$errorHandlingFUSE,self::$errorHandler);self::$errorHandlingFUSE=$mode;if(is_callable($func)){self::$errorHandler=$func;}else{self::$errorHandler=NULL;}return $old;}public static function aliases($list){self::$aliases=$list;}public static function setAutoResolve($automatic=TRUE){self::$autoResolve=(boolean) $automatic;}protected $properties=array();protected $__info=array();protected $beanHelper=NULL;protected $fetchType=NULL;protected $withSql='';protected $withParams=array();protected $aliasName=NULL;protected $via=NULL;protected $noLoad=FALSE;protected $all=FALSE;public static function setMetaAll($beans,$property,$value){foreach($beans as $bean){if($bean instanceof OODBBean)$bean->__info[$property]=$value;}return $beans;}private function parseJoin($type){$joinSql='';$joins=array();if(strpos($this->withSql,'@joined.')!==FALSE){$writer=$this->beanHelper->getToolBox()->getWriter();$oldParts=$parts=explode('@joined.',$this->withSql);array_shift($parts);foreach($parts as $part){$explosion=explode('.',$part);$joinInfo=array_shift($explosion);if(!isset($joins[$joinInfo])){$joins[$joinInfo]=true;$joinSql.=$writer->writeJoin($type,$joinInfo,'LEFT');}}$this->withSql=implode('',$oldParts);$joinSql.=' WHERE ';}return $joinSql;}private function getSharedList($type,$redbean,$toolbox){$writer=$toolbox->getWriter();if($this->via){$oldName=$writer->getAssocTable(array($this->__info['type'],$type));if($oldName!==$this->via){$writer->renameAssocTable($oldName,$this->via);}$this->via=NULL;}$beans=array();if($this->getID()){$type=$this->beau($type);$assocManager=$redbean->getAssociationManager();$beans=$assocManager->related($this,$type,$this->withSql,$this->withParams);}$this->withSql='';$this->withParams=array();return $beans;}private function getOwnList($type,$redbean){$type=$this->beau($type);if($this->aliasName){$parentField=$this->aliasName;$myFieldLink=$parentField.'_id';$this->__info['sys.alias.'.$type]=$this->aliasName;$this->aliasName=NULL;}else{$parentField=$this->__info['type'];$myFieldLink=$parentField.'_id';}$beans=array();if($this->getID()){$firstKey=NULL;if(count($this->withParams)>0){reset($this->withParams);$firstKey=key($this->withParams);}$joinSql=$this->parseJoin($type);if(!is_numeric($firstKey)||$firstKey===NULL){$bindings=$this->withParams;$bindings[':slot0']=$this->getID();$beans=$redbean->find($type,array()," {$joinSql} $myFieldLink = :slot0 ".$this->withSql,$bindings);}else{$bindings=array_merge(array($this->getID()),$this->withParams);$beans=$redbean->find($type,array()," {$joinSql} $myFieldLink = ? ".$this->withSql,$bindings);}}$this->withSql='';$this->withParams=array();foreach($beans as $beanFromList){$beanFromList->__info['sys.parentcache.'.$parentField]=$this;}return $beans;}public function initializeForDispense($type,BeanHelper $beanhelper){$this->beanHelper=$beanhelper;$this->__info['type']=$type;$this->__info['sys.id']='id';$this->__info['sys.orig']=array('id'=>0);$this->__info['tainted']=TRUE;$this->__info['changed']=TRUE;$this->properties['id']=0;}public function setBeanHelper(BeanHelper $helper){$this->beanHelper=$helper;}public function getIterator(){return new\ArrayIterator($this->properties);}public function import($array,$selection=FALSE,$notrim=FALSE){if(is_string($selection)){$selection=explode(',',$selection);}if(!$notrim&&is_array($selection)){foreach($selection as $key=>$selected){$selection[$key]=trim($selected);}}foreach($array as $key=>$value){if($key!='__info'){if(!$selection||($selection&&in_array($key,$selection))){if(is_array($value)){if(isset($value['_type'])){$bean=$this->beanHelper->getToolbox()->getRedBean()->dispense($value['_type']);unset($value['_type']);$bean->import($value);$this->$key=$bean;}else{$listBeans=array();foreach($value as $listKey=>$listItem){$bean=$this->beanHelper->getToolbox()->getRedBean()->dispense($listItem['_type']);unset($listItem['_type']);$bean->import($listItem);$list=&$this->$key;$list[$listKey]=$bean;}}}else{$this->$key=$value;}}}}return $this;}public function importRow($row){$this->properties=$row;$this->__info['sys.orig']=$row;$this->__info['changed']=FALSE;return $this;}public function importFrom(OODBBean $sourceBean){$this->__info['tainted']=TRUE;$this->__info['changed']=TRUE;$this->properties=$sourceBean->properties;return $this;}public function inject(OODBBean $otherBean){$myID=$this->properties['id'];$this->import($otherBean->export());$this->id=$myID;return $this;}public function export($meta=FALSE,$parents=FALSE,$onlyMe=FALSE,$filters=array()){$arr=array();if($parents){foreach($this as $key=>$value){if(substr($key,-3)!='_id')continue;$prop=substr($key,0,strlen($key)-3);$this->$prop;}}$hasFilters=is_array($filters)&&count($filters);foreach($this as $key=>$value){if(!$onlyMe&&is_array($value)){$vn=array();foreach($value as $i=>$b){if(!($b instanceof OODBBean))continue;$vn[]=$b->export($meta,FALSE,FALSE,$filters);$value=$vn;}}elseif($value instanceof OODBBean){if($hasFilters){if(!in_array(strtolower($value->getMeta('type')),$filters))continue;}$value=$value->export($meta,$parents,FALSE,$filters);}$arr[$key]=$value;}if($meta){$arr['__info']=$this->__info;}return $arr;}public function __isset($property){$property=$this->beau($property);if(strpos($property,'xown')===0&&ctype_upper(substr($property,4,1))){$property=substr($property,1);}return isset($this->properties[$property]);}public function getID(){return(isset($this->properties['id']))?(string) $this->properties['id']:NULL;}public function __unset($property){$property=$this->beau($property);if(strpos($property,'xown')===0&&ctype_upper(substr($property,4,1))){$property=substr($property,1);}unset($this->properties[$property]);$shadowKey='sys.shadow.'.$property;if(isset($this->__info[$shadowKey]))unset($this->__info[$shadowKey]);$this->withSql='';$this->withParams=array();$this->aliasName=NULL;$this->fetchType=NULL;$this->noLoad=FALSE;$this->all=FALSE;$this->via=NULL;return;}public function with($sql,$bindings=array()){$this->withSql=$sql;$this->withParams=$bindings;return $this;}public function withCondition($sql,$bindings=array()){$this->withSql=' AND '.$sql;$this->withParams=$bindings;return $this;}public function all(){$this->all=TRUE;return $this;}public function noLoad(){$this->noLoad=TRUE;return $this;}public function alias($aliasName){$this->aliasName=$this->beau($aliasName);return $this;}public function getProperties(){return $this->properties;}public function getPropertiesAndType(){return array($this->properties,$this->__info['type']);}public function beau($property){static $beautifulColumns=array();if(ctype_lower($property))return $property;if((strpos($property,'own')===0&&ctype_upper(substr($property,3,1)))||(strpos($property,'xown')===0&&ctype_upper(substr($property,4,1)))||(strpos($property,'shared')===0&&ctype_upper(substr($property,6,1)))){$property=preg_replace('/List$/','',$property);return $property;}if(!isset($beautifulColumns[$property])){$beautifulColumns[$property]=AQueryWriter::camelsSnake($property);}return $beautifulColumns[$property];}public function clearModifiers(){$this->withSql='';$this->withParams=array();$this->aliasName=NULL;$this->fetchType=NULL;$this->noLoad=FALSE;$this->all=FALSE;$this->via=NULL;return $this;}public function isListInExclusiveMode($listName){$listName=$this->beau($listName);if(strpos($listName,'xown')===0&&ctype_upper(substr($listName,4,1))){$listName=substr($listName,1);}$listName=lcfirst(substr($listName,3));return(isset($this->__info['sys.exclusive-'.$listName])&&$this->__info['sys.exclusive-'.$listName]);}public function&__get($property){$isEx=FALSE;$isOwn=FALSE;$isShared=FALSE;if(!ctype_lower($property)){$property=$this->beau($property);if(strpos($property,'xown')===0&&ctype_upper(substr($property,4,1))){$property=substr($property,1);$listName=lcfirst(substr($property,3));$isEx=TRUE;$isOwn=TRUE;$this->__info['sys.exclusive-'.$listName]=TRUE;}elseif(strpos($property,'own')===0&&ctype_upper(substr($property,3,1))){$isOwn=TRUE;$listName=lcfirst(substr($property,3));}elseif(strpos($property,'shared')===0&&ctype_upper(substr($property,6,1))){$isShared=TRUE;}}$fieldLink=$property.'_id';$exists=isset($this->properties[$property]);if(!$exists&&!isset($this->$fieldLink)&&(!$isOwn&&!$isShared)){$this->withSql='';$this->withParams=array();$this->aliasName=NULL;$this->fetchType=NULL;$this->noLoad=FALSE;$this->all=FALSE;$this->via=NULL;$NULL=NULL;return $NULL;}$hasAlias=(!is_null($this->aliasName));$differentAlias=($hasAlias&&$isOwn&&isset($this->__info['sys.alias.'.$listName]))?($this->__info['sys.alias.'.$listName]!==$this->aliasName):FALSE;$hasSQL=($this->withSql!==''||$this->via!==NULL);$hasAll=(boolean)($this->all);if($exists&&((!$isOwn&&!$isShared)||(!$hasSQL&&!$differentAlias&&!$hasAll))){$this->withSql='';$this->withParams=array();$this->aliasName=NULL;$this->fetchType=NULL;$this->noLoad=FALSE;$this->all=FALSE;$this->via=NULL;return $this->properties[$property];}list($redbean,,,$toolbox)=$this->beanHelper->getExtractedToolbox();if(isset($this->$fieldLink)){$this->__info['tainted']=TRUE;if(isset($this->__info["sys.parentcache.$property"])){$bean=$this->__info["sys.parentcache.$property"];}else{if(isset(self::$aliases[$property])){$type=self::$aliases[$property];}elseif($this->fetchType){$type=$this->fetchType;$this->fetchType=NULL;}else{$type=$property;}$bean=NULL;if(!is_null($this->properties[$fieldLink])){$bean=$redbean->load($type,$this->properties[$fieldLink]);if($bean->id!==$this->properties[$fieldLink]&&self::$autoResolve){$type=$this->beanHelper->getToolbox()->getWriter()->inferFetchType($this->__info['type'],$property);if(!is_null($type)){$bean=$redbean->load($type,$this->properties[$fieldLink]);$this->__info["sys.autoresolved.{$property}"]=$type;}}}}$this->properties[$property]=$bean;$this->withSql='';$this->withParams=array();$this->aliasName=NULL;$this->fetchType=NULL;$this->noLoad=FALSE;$this->all=FALSE;$this->via=NULL;return $this->properties[$property];}if($this->noLoad){$beans=array();}elseif($isOwn){$beans=$this->getOwnList($listName,$redbean);}else{$beans=$this->getSharedList(lcfirst(substr($property,6)),$redbean,$toolbox);}$this->properties[$property]=$beans;$this->__info["sys.shadow.$property"]=$beans;$this->__info['tainted']=TRUE;$this->withSql='';$this->withParams=array();$this->aliasName=NULL;$this->fetchType=NULL;$this->noLoad=FALSE;$this->all=FALSE;$this->via=NULL;return $this->properties[$property];}public function __set($property,$value){$isEx=FALSE;$isOwn=FALSE;$isShared=FALSE;if(!ctype_lower($property)){$property=$this->beau($property);if(strpos($property,'xown')===0&&ctype_upper(substr($property,4,1))){$property=substr($property,1);$listName=lcfirst(substr($property,3));$isEx=TRUE;$isOwn=TRUE;$this->__info['sys.exclusive-'.$listName]=TRUE;}elseif(strpos($property,'own')===0&&ctype_upper(substr($property,3,1))){$isOwn=TRUE;$listName=lcfirst(substr($property,3));}elseif(strpos($property,'shared')===0&&ctype_upper(substr($property,6,1))){$isShared=TRUE;}}$hasAlias=(!is_null($this->aliasName));$differentAlias=($hasAlias&&$isOwn&&isset($this->__info['sys.alias.'.$listName]))?($this->__info['sys.alias.'.$listName]!==$this->aliasName):FALSE;$hasSQL=($this->withSql!==''||$this->via!==NULL);$exists=isset($this->properties[$property]);$fieldLink=$property.'_id';if(($isOwn||$isShared)&&(!$exists||$hasSQL||$differentAlias)){if(!$this->noLoad){list($redbean,,,$toolbox)=$this->beanHelper->getExtractedToolbox();if($isOwn){$beans=$this->getOwnList($listName,$redbean);}else{$beans=$this->getSharedList(lcfirst(substr($property,6)),$redbean,$toolbox);}$this->__info["sys.shadow.$property"]=$beans;}}$this->withSql='';$this->withParams=array();$this->aliasName=NULL;$this->fetchType=NULL;$this->noLoad=FALSE;$this->all=FALSE;$this->via=NULL;$this->__info['tainted']=TRUE;$this->__info['changed']=TRUE;if(array_key_exists($fieldLink,$this->properties)&&!($value instanceof OODBBean)){if(is_null($value)||$value===FALSE){unset($this->properties[$property]);$this->properties[$fieldLink]=NULL;return;}else{throw new RedException('Cannot cast to bean.');}}if($value===FALSE){$value='0';}elseif($value===TRUE){$value='1';}elseif($value instanceof\DateTime){$value=$value->format('Y-m-d H:i:s');}$this->properties[$property]=$value;}public function setProperty($property,$value,$updateShadow=FALSE,$taint=FALSE){$this->properties[$property]=$value;if($updateShadow){$this->__info['sys.shadow.'.$property]=$value;}if($taint){$this->__info['tainted']=TRUE;$this->__info['changed']=TRUE;}}public function getMeta($path,$default=NULL){return(isset($this->__info[$path]))?$this->__info[$path]:$default;}public function moveMeta($path,$value=NULL){if(isset($this->__info[$path])){$value=$this->__info[$path];unset($this->__info[$path]);}return $value;}public function setMeta($path,$value){$this->__info[$path]=$value;return $this;}public function copyMetaFrom(OODBBean $bean){$this->__info=$bean->__info;return $this;}public function __call($method,$args){if(!isset($this->__info['model'])){$model=$this->beanHelper->getModelForBean($this);if(!$model){return NULL;}$this->__info['model']=$model;}if(!method_exists($this->__info['model'],$method)){if(self::$errorHandlingFUSE===FALSE){return NULL;}if(in_array($method,array('update','open','delete','after_delete','after_update','dispense'),TRUE)){return NULL;}$message="FUSE: method does not exist in model: $method";if(self::$errorHandlingFUSE===self::C_ERR_LOG){error_log($message);return NULL;}elseif(self::$errorHandlingFUSE===self::C_ERR_NOTICE){trigger_error($message,E_USER_NOTICE);return NULL;}elseif(self::$errorHandlingFUSE===self::C_ERR_WARN){trigger_error($message,E_USER_WARNING);return NULL;}elseif(self::$errorHandlingFUSE===self::C_ERR_EXCEPTION){throw new\Exception($message);}elseif(self::$errorHandlingFUSE===self::C_ERR_FUNC){$func=self::$errorHandler;return $func(array('message'=>$message,'method'=>$method,'args'=>$args,'bean'=>$this));}trigger_error($message,E_USER_ERROR);return NULL;}return call_user_func_array(array($this->__info['model'],$method),$args);}public function __toString(){$string=$this->__call('__toString',array());if($string===NULL){return json_encode($this->properties);}else{return $string;}}public function offsetSet($offset,$value){$this->__set($offset,$value);}public function offsetExists($offset){return $this->__isset($offset);}public function offsetUnset($offset){$this->__unset($offset);}public function&offsetGet($offset){return $this->__get($offset);}public function fetchAs($type){$this->fetchType=$type;return $this;}public function poly($field){return $this->fetchAs($this->$field);}public function traverse($property,$function,$maxDepth=NULL){$this->via=NULL;if(strpos($property,'shared')!==FALSE){throw new RedException('Traverse only works with (x)own-lists.');}if(!is_null($maxDepth)){if(!$maxDepth--)return $this;}$oldFetchType=$this->fetchType;$oldAliasName=$this->aliasName;$oldWith=$this->withSql;$oldBindings=$this->withParams;$beans=$this->$property;if($beans===NULL)return $this;if(!is_array($beans))$beans=array($beans);foreach($beans as $bean){$function($bean);$bean->fetchType=$oldFetchType;$bean->aliasName=$oldAliasName;$bean->withSql=$oldWith;$bean->withParams=$oldBindings;$bean->traverse($property,$function,$maxDepth);}return $this;}public function count(){return count($this->properties);}public function isEmpty(){$empty=TRUE;foreach($this->properties as $key=>$value){if($key=='id'){continue;}if(!empty($value)){$empty=FALSE;}}return $empty;}public function setAttr($property,$value){$this->$property=$value;return $this;}public function unsetAll($properties){foreach($properties as $prop){if(isset($this->properties[$prop])){unset($this->properties[$prop]);}}return $this;}public function old($property){$old=$this->getMeta('sys.orig',array());if(array_key_exists($property,$old)){return $old[$property];}return NULL;}public function isTainted(){return $this->getMeta('tainted');}public function hasChanged($property){return(array_key_exists($property,$this->properties))?$this->old($property)!=$this->properties[$property]:FALSE;}public function hasListChanged($property){if(!array_key_exists($property,$this->properties))return FALSE;$diffAdded=array_diff_assoc($this->properties[$property],$this->__info['sys.shadow.'.$property]);if(count($diffAdded))return TRUE;$diffMissing=array_diff_assoc($this->__info['sys.shadow.'.$property],$this->properties[$property]);if(count($diffMissing))return TRUE;return FALSE;}public function clearHistory(){$this->__info['sys.orig']=array();foreach($this->properties as $key=>$value){if(is_scalar($value)){$this->__info['sys.orig'][$key]=$value;}else{$this->__info['sys.shadow.'.$key]=$value;}}return $this;}public function link($typeOrBean,$qualification=array()){if(is_string($typeOrBean)){$typeOrBean=AQueryWriter::camelsSnake($typeOrBean);$bean=$this->beanHelper->getToolBox()->getRedBean()->dispense($typeOrBean);if(is_string($qualification)){$data=json_decode($qualification,TRUE);}else{$data=$qualification;}foreach($data as $key=>$value){$bean->$key=$value;}}else{$bean=$typeOrBean;}$list='own'.ucfirst($bean->getMeta('type'));array_push($this->$list,$bean);return $bean;}public function fresh(){return $this->beanHelper->getToolbox()->getRedBean()->load($this->getMeta('type'),$this->properties['id']);}public function via($via){$this->via=AQueryWriter::camelsSnake($via);return $this;}public function countOwn($type){$type=$this->beau($type);if($this->aliasName){$myFieldLink=$this->aliasName.'_id';$this->aliasName=NULL;}else{$myFieldLink=$this->__info['type'].'_id';}$count=0;if($this->getID()){$firstKey=NULL;if(count($this->withParams)>0){reset($this->withParams);$firstKey=key($this->withParams);}$joinSql=$this->parseJoin($type);if(!is_numeric($firstKey)||$firstKey===NULL){$bindings=$this->withParams;$bindings[':slot0']=$this->getID();$count=$this->beanHelper->getToolbox()->getWriter()->queryRecordCount($type,array()," {$joinSql} $myFieldLink = :slot0 ".$this->withSql,$bindings);}else{$bindings=array_merge(array($this->getID()),$this->withParams);$count=$this->beanHelper->getToolbox()->getWriter()->queryRecordCount($type,array()," {$joinSql} $myFieldLink = ? ".$this->withSql,$bindings);}}$this->clearModifiers();return (int) $count;}public function countShared($type){$toolbox=$this->beanHelper->getToolbox();$redbean=$toolbox->getRedBean();$writer=$toolbox->getWriter();if($this->via){$oldName=$writer->getAssocTable(array($this->__info['type'],$type));if($oldName!==$this->via){$writer->renameAssocTable($oldName,$this->via);$this->via=NULL;}}$type=$this->beau($type);$count=0;if($this->getID()){$count=$redbean->getAssociationManager()->relatedCount($this,$type,$this->withSql,$this->withParams,TRUE);}$this->clearModifiers();return (integer) $count;}public function&aggr($list,$property,$type=NULL){$this->via=NULL;$ids=$beanIndex=$references=array();if(strlen($list)<4)throw new RedException('Invalid own-list.');if(strpos($list,'own')!==0)throw new RedException('Only own-lists can be aggregated.');if(!ctype_upper(substr($list,3,1)))throw new RedException('Invalid own-list.');if(is_null($type))$type=$property;foreach($this->$list as $bean){$field=$property.'_id';if(isset($bean->$field)){$ids[]=$bean->$field;$beanIndex[$bean->$field]=$bean;}}$beans=$this->beanHelper->getToolBox()->getRedBean()->batch($type,$ids);foreach($beans as $bean){$beanIndex[$bean->id]->setProperty($property,$bean);}foreach($beanIndex as $indexedBean){$references[]=$indexedBean->$property;}return $references;}public function equals(OODBBean $bean){return (bool)(((string) $this->properties['id']===(string) $bean->properties['id'])&&((string) $this->__info['type']===(string) $bean->__info['type']));}}}namespace RedBeanPHP{use RedBeanPHP\Observer as Observer;abstract class Observable{private $observers=array();public function addEventListener($eventname,Observer $observer){if(!isset($this->observers[$eventname])){$this->observers[$eventname]=array();}foreach($this->observers[$eventname]as $o){if($o==$observer){return;}}$this->observers[$eventname][]=$observer;}public function signal($eventname,$info){if(!isset($this->observers[$eventname])){$this->observers[$eventname]=array();}foreach($this->observers[$eventname]as $observer){$observer->onEvent($eventname,$info);}}}}namespace RedBeanPHP{interface Observer{public function onEvent($eventname,$bean);}}namespace RedBeanPHP{interface Adapter{public function getSQL();public function exec($sql,$bindings=array(),$noevent=FALSE);public function get($sql,$bindings=array());public function getRow($sql,$bindings=array());public function getCol($sql,$bindings=array());public function getCell($sql,$bindings=array());public function getAssoc($sql,$bindings=array());public function getAssocRow($sql,$bindings=array());public function getInsertID();public function getAffectedRows();public function getCursor($sql,$bindings=array());public function getDatabase();public function startTransaction();public function commit();public function rollback();public function close();}}namespace RedBeanPHP\Adapter{use RedBeanPHP\Observable as Observable;use RedBeanPHP\Adapter as Adapter;use RedBeanPHP\Driver as Driver;class DBAdapter extends Observable implements Adapter{private $db=NULL;private $sql='';public function __construct($database){$this->db=$database;}public function getSQL(){return $this->sql;}public function exec($sql,$bindings=array(),$noevent=FALSE){if(!$noevent){$this->sql=$sql;$this->signal('sql_exec',$this);}return $this->db->Execute($sql,$bindings);}public function get($sql,$bindings=array()){$this->sql=$sql;$this->signal('sql_exec',$this);return $this->db->GetAll($sql,$bindings);}public function getRow($sql,$bindings=array()){$this->sql=$sql;$this->signal('sql_exec',$this);return $this->db->GetRow($sql,$bindings);}public function getCol($sql,$bindings=array()){$this->sql=$sql;$this->signal('sql_exec',$this);return $this->db->GetCol($sql,$bindings);}public function getAssoc($sql,$bindings=array()){$this->sql=$sql;$this->signal('sql_exec',$this);$rows=$this->db->GetAll($sql,$bindings);$assoc=array();if(!$rows){return $assoc;}foreach($rows as $row){if(empty($row))continue;if(count($row)>2){$key=array_shift($row);$value=$row;}elseif(count($row)>1){$key=array_shift($row);$value=array_shift($row);}else{$key=array_shift($row);$value=$key;}$assoc[$key]=$value;}return $assoc;}public function getAssocRow($sql,$bindings=array()){$this->sql=$sql;$this->signal('sql_exec',$this);return $this->db->GetAssocRow($sql,$bindings);}public function getCell($sql,$bindings=array(),$noSignal=NULL){$this->sql=$sql;if(!$noSignal)$this->signal('sql_exec',$this);return $this->db->GetOne($sql,$bindings);}public function getCursor($sql,$bindings=array()){return $this->db->GetCursor($sql,$bindings);}public function getInsertID(){return $this->db->getInsertID();}public function getAffectedRows(){return $this->db->Affected_Rows();}public function getDatabase(){return $this->db;}public function startTransaction(){$this->db->StartTrans();}public function commit(){$this->db->CommitTrans();}public function rollback(){$this->db->FailTrans();}public function close(){$this->db->close();}}}namespace RedBeanPHP{interface Cursor{public function getNextItem();public function close();}}namespace RedBeanPHP\Cursor{use RedBeanPHP\Cursor as Cursor;class PDOCursor implements Cursor{protected $res;protected $fetchStyle;public function __construct(\PDOStatement $res,$fetchStyle){$this->res=$res;$this->fetchStyle=$fetchStyle;}public function getNextItem(){return $this->res->fetch();}public function close(){$this->res->closeCursor();}}}namespace RedBeanPHP\Cursor{use RedBeanPHP\Cursor as Cursor;class NullCursor implements Cursor{public function getNextItem(){return NULL;}public function close(){return NULL;}}}namespace RedBeanPHP{use RedBeanPHP\Cursor as Cursor;use RedBeanPHP\Repository as Repository;class BeanCollection{protected $cursor=NULL;protected $repository=NULL;protected $type=NULL;public function __construct($type,Repository $repository,Cursor $cursor){$this->type=$type;$this->cursor=$cursor;$this->repository=$repository;}public function next(){$row=$this->cursor->getNextItem();if($row){$beans=$this->repository->convertToBeans($this->type,array($row));$bean=array_shift($beans);return $bean;}return NULL;}public function close(){$this->cursor->close();}}}namespace RedBeanPHP{interface QueryWriter{const C_SQLFILTER_READ='r';const C_SQLFILTER_WRITE='w';const C_SQLSTATE_NO_SUCH_TABLE=1;const C_SQLSTATE_NO_SUCH_COLUMN=2;const C_SQLSTATE_INTEGRITY_CONSTRAINT_VIOLATION=3;const C_DATATYPE_RANGE_SPECIAL=80;const C_DATATYPE_RANGE_SPECIFIED=99;const C_GLUE_WHERE=1;const C_GLUE_AND=2;public function writeJoin($type,$targetType,$joinType);public function glueSQLCondition($sql,$glue=NULL);public function glueLimitOne($sql);public function getTables();public function createTable($type);public function getColumns($type);public function scanType($value,$alsoScanSpecialForTypes=FALSE);public function addColumn($type,$column,$field);public function code($typedescription,$includeSpecials=FALSE);public function widenColumn($type,$column,$datatype);public function queryRecord($type,$conditions=array(),$addSql=NULL,$bindings=array());public function queryRecordWithCursor($type,$addSql=NULL,$bindings=array());public function queryRecordRelated($sourceType,$destType,$linkID,$addSql='',$bindings=array());public function queryRecordLink($sourceType,$destType,$sourceID,$destID);public function queryRecordCount($type,$conditions=array(),$addSql=NULL,$bindings=array());public function queryRecordCountRelated($sourceType,$targetType,$linkID,$addSQL='',$bindings=array());public function queryTagged($type,$tagList,$all=FALSE,$addSql='',$bindings=array());public function updateRecord($type,$updatevalues,$id=NULL);public function deleteRecord($type,$conditions=array(),$addSql='',$bindings=array());public function deleteRelations($sourceType,$destType,$sourceID);public function addUniqueIndex($type,$columns);public function addUniqueConstraint($type,$columns);public function sqlStateIn($state,$list);public function wipe($type);public function addFK($type,$targetType,$property,$targetProperty,$isDep=false);public function addIndex($type,$name,$property);public function esc($databaseStructure,$dontQuote=FALSE);public function wipeAll();public function renameAssocTable($fromType,$toType=NULL);public function getAssocTable($types);public function inferFetchType($type,$property);}}namespace RedBeanPHP\QueryWriter{use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\RedException as RedException;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\RedException\SQL as SQLException;abstract class AQueryWriter{private static $sqlFilters=array();private static $flagSQLFilterSafeMode=false;private static $flagNarrowFieldMode=true;public static $renames=array();protected $adapter;protected $defaultValue='NULL';protected $quoteCharacter='';protected $flagUseCache=TRUE;protected $cache=array();protected $maxCacheSizePerType=20;public $typeno_sqltype=array();public static function canBeTreatedAsInt($value){return (bool)(strval($value)===strval(intval($value)));}public static function getAssocTableFormat($types){sort($types);$assoc=implode('_',$types);return(isset(self::$renames[$assoc]))?self::$renames[$assoc]:$assoc;}public static function renameAssociation($from,$to=NULL){if(is_array($from)){foreach($from as $key=>$value)self::$renames[$key]=$value;return;}self::$renames[$from]=$to;}public static function camelsSnake($camel){return strtolower(preg_replace('/(?<=[a-z])([A-Z])|([A-Z])(?=[a-z])/','_$1$2',$camel));}public static function clearRenames(){self::$renames=array();}public static function setNarrowFieldMode($narrowField){self::$flagNarrowFieldMode=(boolean) $narrowField;}public static function setSQLFilters($sqlFilters,$safeMode=false){self::$flagSQLFilterSafeMode=(boolean) $safeMode;self::$sqlFilters=$sqlFilters;}public static function getSQLFilters(){return self::$sqlFilters;}private function getCacheKey($keyValues){return json_encode($keyValues);}private function getCached($cacheTag,$key){$sql=$this->adapter->getSQL();if($this->updateCache()){if(isset($this->cache[$cacheTag][$key])){return $this->cache[$cacheTag][$key];}}return NULL;}private function updateCache(){$sql=$this->adapter->getSQL();if(strpos($sql,'-- keep-cache')!==strlen($sql)-13){$this->cache=array();return FALSE;}return TRUE;}private function putResultInCache($cacheTag,$key,$values){if(isset($this->cache[$cacheTag])){if(count($this->cache[$cacheTag])>$this->maxCacheSizePerType)array_shift($this->cache[$cacheTag]);}else{$this->cache[$cacheTag]=array();}$this->cache[$cacheTag][$key]=$values;}private function makeSQLFromConditions($conditions,&$bindings,$addSql=''){reset($bindings);$firstKey=key($bindings);$paramTypeIsNum=(is_numeric($firstKey));$counter=0;$sqlConditions=array();foreach($conditions as $column=>$values){if(!count($values))continue;$sql=$this->esc($column);$sql.=' IN ( ';if(!is_array($values))$values=array($values);if(ctype_digit(implode('',$values))){$sql.=implode(',',$values).' ) ';$sqlConditions[]=$sql;}else{if($paramTypeIsNum){$sql.=implode(',',array_fill(0,count($values),'?')).' ) ';array_unshift($sqlConditions,$sql);foreach($values as $k=>$v){$values[$k]=strval($v);array_unshift($bindings,$v);}}else{$slots=array();foreach($values as $k=>$v){$slot=':slot'.$counter++;$slots[]=$slot;$bindings[$slot]=strval($v);}$sql.=implode(',',$slots).' ) ';$sqlConditions[]=$sql;}}}$sql='';if(is_array($sqlConditions)&&count($sqlConditions)>0){$sql=implode(' AND ',$sqlConditions);$sql=" WHERE ( $sql ) ";if($addSql)$sql.=$addSql;}elseif($addSql){$sql=$addSql;}return $sql;}private function getRelationalTablesAndColumns($sourceType,$destType,$noQuote=FALSE){$linkTable=$this->esc($this->getAssocTable(array($sourceType,$destType)),$noQuote);$sourceCol=$this->esc($sourceType.'_id',$noQuote);if($sourceType===$destType){$destCol=$this->esc($destType.'2_id',$noQuote);}else{$destCol=$this->esc($destType.'_id',$noQuote);}$sourceTable=$this->esc($sourceType,$noQuote);$destTable=$this->esc($destType,$noQuote);return array($sourceTable,$destTable,$linkTable,$sourceCol,$destCol);}protected function getForeignKeyForTypeProperty($type,$property){$property=$this->esc($property,TRUE);try{$map=$this->getKeyMapForType($type);}catch(SQLException $e){return NULL;}foreach($map as $key){if($key['from']===$property)return $key;}return NULL;}protected function getKeyMapForType($type){return array();}protected function makeFKLabel($from,$type,$to){return"from_{$from}_to_table_{$type}_col_{$to}";}protected function getSQLFilterSnippet($type){$existingCols=array();if(self::$flagSQLFilterSafeMode){$existingCols=$this->getColumns($type);}$sqlFilters=array();if(isset(self::$sqlFilters[QueryWriter::C_SQLFILTER_READ][$type])){foreach(self::$sqlFilters[QueryWriter::C_SQLFILTER_READ][$type]as $property=>$sqlFilter){if(!self::$flagSQLFilterSafeMode||isset($existingCols[$property])){$sqlFilters[]=$sqlFilter.' AS '.$property.' ';}}}$sqlFilterStr=(count($sqlFilters))?(','.implode(',',$sqlFilters)):'';return $sqlFilterStr;}protected function getParametersForInClause(&$valueList,$otherBindings,$offset=0){if(is_array($otherBindings)&&count($otherBindings)>0){reset($otherBindings);$key=key($otherBindings);if(!is_numeric($key)){$filler=array();$newList=(!$offset)?array():$valueList;$counter=$offset;foreach($valueList as $value){$slot=':slot'.($counter++);$filler[]=$slot;$newList[$slot]=$value;}$valueList=$newList;return implode(',',$filler);}}return implode(',',array_fill(0,count($valueList),'?'));}protected function addDataType($dataTypeID,$SQLDefinition){$this->typeno_sqltype[$dataTypeID]=$SQLDefinition;$this->sqltype_typeno[$SQLDefinition]=$dataTypeID;return $this;}protected function getInsertSuffix($table){return'';}protected function startsWithZeros($value){$value=strval($value);if(strlen($value)>1&&strpos($value,'0')===0&&strpos($value,'0.')!==0){return TRUE;}else{return FALSE;}}protected function insertRecord($type,$insertcolumns,$insertvalues){$default=$this->defaultValue;$suffix=$this->getInsertSuffix($type);$table=$this->esc($type);if(count($insertvalues)>0&&is_array($insertvalues[0])&&count($insertvalues[0])>0){$insertSlots=array();foreach($insertcolumns as $k=>$v){$insertcolumns[$k]=$this->esc($v);if(isset(self::$sqlFilters['w'][$type][$v])){$insertSlots[]=self::$sqlFilters['w'][$type][$v];}else{$insertSlots[]='?';}}$insertSQL="INSERT INTO $table ( id, ".implode(',',$insertcolumns)." ) VALUES
			( $default, ".implode(',',$insertSlots)." ) $suffix";$ids=array();foreach($insertvalues as $i=>$insertvalue){$ids[]=$this->adapter->getCell($insertSQL,$insertvalue,$i);}$result=count($ids)===1?array_pop($ids):$ids;}else{$result=$this->adapter->getCell("INSERT INTO $table (id) VALUES($default) $suffix");}if($suffix)return $result;$last_id=$this->adapter->getInsertID();return $last_id;}protected function check($struct){if(!is_string($struct)||!preg_match('/^[a-zA-Z0-9_]+$/',$struct)){throw new RedException('Identifier does not conform to RedBeanPHP security policies.');}return $struct;}public function tableExists($table){$tables=$this->getTables();return in_array($table,$tables);}public function glueSQLCondition($sql,$glue=NULL){static $snippetCache=array();if(trim($sql)===''){return $sql;}$key=$glue.'|'.$sql;if(isset($snippetCache[$key])){return $snippetCache[$key];}$lsql=ltrim($sql);if(preg_match('/^(INNER|LEFT|RIGHT|JOIN|AND|OR|WHERE|ORDER|GROUP|HAVING|LIMIT|OFFSET)\s+/i',$lsql)){if($glue===QueryWriter::C_GLUE_WHERE&&stripos($lsql,'AND')===0){$snippetCache[$key]=' WHERE '.substr($lsql,3);}else{$snippetCache[$key]=$sql;}}else{$snippetCache[$key]=(($glue===QueryWriter::C_GLUE_AND)?' AND ':' WHERE ').$sql;}return $snippetCache[$key];}public function glueLimitOne($sql=''){return(strpos($sql,'LIMIT')===FALSE)?($sql.' LIMIT 1 '):$sql;}public function esc($dbStructure,$dontQuote=FALSE){$this->check($dbStructure);return($dontQuote)?$dbStructure:$this->quoteCharacter.$dbStructure.$this->quoteCharacter;}public function addColumn($type,$column,$field){$table=$type;$type=$field;$table=$this->esc($table);$column=$this->esc($column);$type=(isset($this->typeno_sqltype[$type]))?$this->typeno_sqltype[$type]:'';$this->adapter->exec("ALTER TABLE $table ADD $column $type ");}public function updateRecord($type,$updatevalues,$id=NULL){$table=$type;if(!$id){$insertcolumns=$insertvalues=array();foreach($updatevalues as $pair){$insertcolumns[]=$pair['property'];$insertvalues[]=$pair['value'];}return (string) $this->insertRecord($table,$insertcolumns,array($insertvalues));}if($id&&!count($updatevalues)){return $id;}$table=$this->esc($table);$sql="UPDATE $table SET ";$p=$v=array();foreach($updatevalues as $uv){if(isset(self::$sqlFilters['w'][$type][$uv['property']])){$p[]=" {$this->esc($uv["property"])} = ".self::$sqlFilters['w'][$type][$uv['property']];}else{$p[]=" {$this->esc($uv["property"])} = ? ";}$v[]=$uv['value'];}$sql.=implode(',',$p).' WHERE id = ? ';$v[]=$id;$this->adapter->exec($sql,$v);return $id;}public function writeJoin($type,$targetType,$leftRight='LEFT'){if($leftRight!=='LEFT'&&$leftRight!=='RIGHT'&&$leftRight!=='INNER')throw new RedException('Invalid JOIN.');$table=$this->esc($type);$targetTable=$this->esc($targetType);$field=$this->esc($targetType,TRUE);return" {$leftRight} JOIN {$targetTable} ON {$targetTable}.id = {$table}.{$field}_id ";}public function queryRecord($type,$conditions=array(),$addSql=NULL,$bindings=array()){$addSql=$this->glueSQLCondition($addSql,(count($conditions)>0)?QueryWriter::C_GLUE_AND:NULL);$key=NULL;if($this->flagUseCache){$key=$this->getCacheKey(array($conditions,$addSql,$bindings,'select'));if($cached=$this->getCached($type,$key)){return $cached;}}$table=$this->esc($type);$sqlFilterStr='';if(count(self::$sqlFilters)){$sqlFilterStr=$this->getSQLFilterSnippet($type);}$sql=$this->makeSQLFromConditions($conditions,$bindings,$addSql);$fieldSelection=(self::$flagNarrowFieldMode)?"{$table}.*":'*';$sql="SELECT {$fieldSelection} {$sqlFilterStr} FROM {$table} {$sql} -- keep-cache";$rows=$this->adapter->get($sql,$bindings);if($this->flagUseCache&&$key){$this->putResultInCache($type,$key,$rows);}return $rows;}public function queryRecordWithCursor($type,$addSql=NULL,$bindings=array()){$sql=$this->glueSQLCondition($addSql,NULL);$table=$this->esc($type);$sql="SELECT {$table}.* FROM {$table} {$sql}";return $this->adapter->getCursor($sql,$bindings);}public function queryRecordRelated($sourceType,$destType,$linkIDs,$addSql='',$bindings=array()){$addSql=$this->glueSQLCondition($addSql,QueryWriter::C_GLUE_WHERE);list($sourceTable,$destTable,$linkTable,$sourceCol,$destCol)=$this->getRelationalTablesAndColumns($sourceType,$destType);$key=$this->getCacheKey(array($sourceType,$destType,implode(',',$linkIDs),$addSql,$bindings));if($this->flagUseCache&&$cached=$this->getCached($destType,$key)){return $cached;}$inClause=$this->getParametersForInClause($linkIDs,$bindings);$sqlFilterStr='';if(count(self::$sqlFilters)){$sqlFilterStr=$this->getSQLFilterSnippet($destType);}if($sourceType===$destType){$inClause2=$this->getParametersForInClause($linkIDs,$bindings,count($bindings));$sql="
			SELECT
				{$destTable}.* {$sqlFilterStr} ,
				COALESCE(
				NULLIF({$linkTable}.{$sourceCol}, {$destTable}.id),
				NULLIF({$linkTable}.{$destCol}, {$destTable}.id)) AS linked_by
			FROM {$linkTable}
			INNER JOIN {$destTable} ON
			( {$destTable}.id = {$linkTable}.{$destCol} AND {$linkTable}.{$sourceCol} IN ($inClause) ) OR
			( {$destTable}.id = {$linkTable}.{$sourceCol} AND {$linkTable}.{$destCol} IN ($inClause2) )
			{$addSql}
			-- keep-cache";$linkIDs=array_merge($linkIDs,$linkIDs);}else{$sql="
			SELECT
				{$destTable}.* {$sqlFilterStr},
				{$linkTable}.{$sourceCol} AS linked_by
			FROM {$linkTable}
			INNER JOIN {$destTable} ON
			( {$destTable}.id = {$linkTable}.{$destCol} AND {$linkTable}.{$sourceCol} IN ($inClause) )
			{$addSql}
			-- keep-cache";}$bindings=array_merge($linkIDs,$bindings);$rows=$this->adapter->get($sql,$bindings);$this->putResultInCache($destType,$key,$rows);return $rows;}public function queryRecordLink($sourceType,$destType,$sourceID,$destID){list($sourceTable,$destTable,$linkTable,$sourceCol,$destCol)=$this->getRelationalTablesAndColumns($sourceType,$destType);$key=$this->getCacheKey(array($sourceType,$destType,$sourceID,$destID));if($this->flagUseCache&&$cached=$this->getCached($linkTable,$key)){return $cached;}$sqlFilterStr='';if(count(self::$sqlFilters)){$sqlFilterStr=$this->getSQLFilterSnippet($destType);}if($sourceTable===$destTable){$sql="SELECT {$linkTable}.* {$sqlFilterStr} FROM {$linkTable}
				WHERE ( {$sourceCol} = ? AND {$destCol} = ? ) OR
				 ( {$destCol} = ? AND {$sourceCol} = ? ) -- keep-cache";$row=$this->adapter->getRow($sql,array($sourceID,$destID,$sourceID,$destID));}else{$sql="SELECT {$linkTable}.* {$sqlFilterStr} FROM {$linkTable}
				WHERE {$sourceCol} = ? AND {$destCol} = ? -- keep-cache";$row=$this->adapter->getRow($sql,array($sourceID,$destID));}$this->putResultInCache($linkTable,$key,$row);return $row;}public function queryTagged($type,$tagList,$all=FALSE,$addSql='',$bindings=array()){$assocType=$this->getAssocTable(array($type,'tag'));$assocTable=$this->esc($assocType);$assocField=$type.'_id';$table=$this->esc($type);$slots=implode(',',array_fill(0,count($tagList),'?'));$score=($all)?count($tagList):1;$sql="
			SELECT {$table}.*, count({$table}.id) FROM {$table}
			INNER JOIN {$assocTable} ON {$assocField} = {$table}.id
			INNER JOIN tag ON {$assocTable}.tag_id = tag.id
			WHERE tag.title IN ({$slots})
			GROUP BY {$table}.id
			HAVING count({$table}.id) >= ?
			{$addSql}
		";$bindings=array_merge($tagList,array($score),$bindings);$rows=$this->adapter->get($sql,$bindings);return $rows;}public function queryRecordCount($type,$conditions=array(),$addSql=NULL,$bindings=array()){$addSql=$this->glueSQLCondition($addSql);$table=$this->esc($type);$this->updateCache();$sql=$this->makeSQLFromConditions($conditions,$bindings,$addSql);$sql="SELECT COUNT(*) FROM {$table} {$sql} -- keep-cache";return (int) $this->adapter->getCell($sql,$bindings);}public function queryRecordCountRelated($sourceType,$destType,$linkID,$addSql='',$bindings=array()){list($sourceTable,$destTable,$linkTable,$sourceCol,$destCol)=$this->getRelationalTablesAndColumns($sourceType,$destType);$this->updateCache();if($sourceType===$destType){$sql="
			SELECT COUNT(*) FROM {$linkTable}
			INNER JOIN {$destTable} ON
			( {$destTable}.id = {$linkTable}.{$destCol} AND {$linkTable}.{$sourceCol} = ? ) OR
			( {$destTable}.id = {$linkTable}.{$sourceCol} AND {$linkTable}.{$destCol} = ? )
			{$addSql}
			-- keep-cache";$bindings=array_merge(array($linkID,$linkID),$bindings);}else{$sql="
			SELECT COUNT(*) FROM {$linkTable}
			INNER JOIN {$destTable} ON
			( {$destTable}.id = {$linkTable}.{$destCol} AND {$linkTable}.{$sourceCol} = ? )
			{$addSql}
			-- keep-cache";$bindings=array_merge(array($linkID),$bindings);}return (int) $this->adapter->getCell($sql,$bindings);}public function deleteRecord($type,$conditions=array(),$addSql=NULL,$bindings=array()){$addSql=$this->glueSQLCondition($addSql);$table=$this->esc($type);$sql=$this->makeSQLFromConditions($conditions,$bindings,$addSql);$sql="DELETE FROM {$table} {$sql}";$this->adapter->exec($sql,$bindings);}public function deleteRelations($sourceType,$destType,$sourceID){list($sourceTable,$destTable,$linkTable,$sourceCol,$destCol)=$this->getRelationalTablesAndColumns($sourceType,$destType);if($sourceTable===$destTable){$sql="DELETE FROM {$linkTable}
				WHERE ( {$sourceCol} = ? ) OR
				( {$destCol} = ?  )
			";$this->adapter->exec($sql,array($sourceID,$sourceID));}else{$sql="DELETE FROM {$linkTable}
				WHERE {$sourceCol} = ? ";$this->adapter->exec($sql,array($sourceID));}}public function widenColumn($type,$property,$dataType){if(!isset($this->typeno_sqltype[$dataType]))return FALSE;$table=$this->esc($type);$column=$this->esc($property);$newType=$this->typeno_sqltype[$dataType];$this->adapter->exec("ALTER TABLE $table CHANGE $column $column $newType ");return TRUE;}public function wipe($type){$table=$this->esc($type);$this->adapter->exec("TRUNCATE $table ");}public function renameAssocTable($from,$to=NULL){self::renameAssociation($from,$to);}public function getAssocTable($types){return self::getAssocTableFormat($types);}public function setUseCache($yesNo){$this->flushCache();$this->flagUseCache=(bool) $yesNo;}public function flushCache($newMaxCacheSizePerType=NULL){if(!is_null($newMaxCacheSizePerType)&&$newMaxCacheSizePerType>0){$this->maxCacheSizePerType=$newMaxCacheSizePerType;}$count=count($this->cache,COUNT_RECURSIVE);$this->cache=array();return $count;}public function safeColumn($column,$noQuotes=FALSE){return $this->esc($column,$noQuotes);}public function safeTable($table,$noQuotes=FALSE){return $this->esc($table,$noQuotes);}public function inferFetchType($type,$property){$type=$this->esc($type,TRUE);$field=$this->esc($property,TRUE).'_id';$keys=$this->getKeyMapForType($type);foreach($keys as $key){if($key['from']===$field)return $key['table'];}return NULL;}public function addUniqueIndex($type,$properties){return $this->addUniqueConstraint($type,$properties);}}}namespace RedBeanPHP\QueryWriter{use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\Adapter as Adapter;use RedBeanPHP\RedException\SQL as SQLException;class MySQL extends AQueryWriter implements QueryWriter{const C_DATATYPE_BOOL=0;const C_DATATYPE_UINT32=2;const C_DATATYPE_DOUBLE=3;const C_DATATYPE_TEXT7=4;const C_DATATYPE_TEXT8=5;const C_DATATYPE_TEXT16=6;const C_DATATYPE_TEXT32=7;const C_DATATYPE_SPECIAL_DATE=80;const C_DATATYPE_SPECIAL_DATETIME=81;const C_DATATYPE_SPECIAL_POINT=90;const C_DATATYPE_SPECIAL_LINESTRING=91;const C_DATATYPE_SPECIAL_POLYGON=92;const C_DATATYPE_SPECIFIED=99;protected $adapter;protected $quoteCharacter='`';protected function getKeyMapForType($type){$table=$this->esc($type,TRUE);$keys=$this->adapter->get('
			SELECT
				information_schema.key_column_usage.constraint_name AS `name`,
				information_schema.key_column_usage.referenced_table_name AS `table`,
				information_schema.key_column_usage.column_name AS `from`,
				information_schema.key_column_usage.referenced_column_name AS `to`,
				information_schema.referential_constraints.update_rule AS `on_update`,
				information_schema.referential_constraints.delete_rule AS `on_delete`
				FROM information_schema.key_column_usage
				INNER JOIN information_schema.referential_constraints
					ON (
						information_schema.referential_constraints.constraint_name = information_schema.key_column_usage.constraint_name
						AND information_schema.referential_constraints.constraint_schema = information_schema.key_column_usage.constraint_schema
						AND information_schema.referential_constraints.constraint_catalog = information_schema.key_column_usage.constraint_catalog
					)
			WHERE
				information_schema.key_column_usage.table_schema IN ( SELECT DATABASE() )
				AND information_schema.key_column_usage.table_name = ?
				AND information_schema.key_column_usage.constraint_name != \'PRIMARY\'
				AND information_schema.key_column_usage.referenced_table_name IS NOT NULL
		',array($table));$keyInfoList=array();foreach($keys as $k){$label=$this->makeFKLabel($k['from'],$k['table'],$k['to']);$keyInfoList[$label]=array('name'=>$k['name'],'from'=>$k['from'],'table'=>$k['table'],'to'=>$k['to'],'on_update'=>$k['on_update'],'on_delete'=>$k['on_delete']);}return $keyInfoList;}public function __construct(Adapter $adapter){$this->typeno_sqltype=array(MySQL::C_DATATYPE_BOOL=>' TINYINT(1) UNSIGNED ',MySQL::C_DATATYPE_UINT32=>' INT(11) UNSIGNED ',MySQL::C_DATATYPE_DOUBLE=>' DOUBLE ',MySQL::C_DATATYPE_TEXT7=>' VARCHAR(191) ',MYSQL::C_DATATYPE_TEXT8=>' VARCHAR(255) ',MySQL::C_DATATYPE_TEXT16=>' TEXT ',MySQL::C_DATATYPE_TEXT32=>' LONGTEXT ',MySQL::C_DATATYPE_SPECIAL_DATE=>' DATE ',MySQL::C_DATATYPE_SPECIAL_DATETIME=>' DATETIME ',MySQL::C_DATATYPE_SPECIAL_POINT=>' POINT ',MySQL::C_DATATYPE_SPECIAL_LINESTRING=>' LINESTRING ',MySQL::C_DATATYPE_SPECIAL_POLYGON=>' POLYGON ',);$this->sqltype_typeno=array();foreach($this->typeno_sqltype as $k=>$v){$this->sqltype_typeno[trim(strtolower($v))]=$k;}$this->adapter=$adapter;$this->encoding=$this->adapter->getDatabase()->getMysqlEncoding();}public function getTypeForID(){return self::C_DATATYPE_UINT32;}public function getTables(){return $this->adapter->getCol('show tables');}public function createTable($table){$table=$this->esc($table);$encoding=$this->adapter->getDatabase()->getMysqlEncoding();$sql="CREATE TABLE $table (id INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT, PRIMARY KEY ( id )) ENGINE = InnoDB DEFAULT CHARSET={$encoding} COLLATE={$encoding}_unicode_ci ";$this->adapter->exec($sql);}public function getColumns($table){$columnsRaw=$this->adapter->get("DESCRIBE ".$this->esc($table));$columns=array();foreach($columnsRaw as $r){$columns[$r['Field']]=$r['Type'];}return $columns;}public function scanType($value,$flagSpecial=FALSE){$this->svalue=$value;if(is_null($value))return MySQL::C_DATATYPE_BOOL;if($value===INF)return MySQL::C_DATATYPE_TEXT7;if($flagSpecial){if(preg_match('/^\d{4}\-\d\d-\d\d$/',$value)){return MySQL::C_DATATYPE_SPECIAL_DATE;}if(preg_match('/^\d{4}\-\d\d-\d\d\s\d\d:\d\d:\d\d$/',$value)){return MySQL::C_DATATYPE_SPECIAL_DATETIME;}if(preg_match('/^POINT\(/',$value)){return MySQL::C_DATATYPE_SPECIAL_POINT;}if(preg_match('/^LINESTRING\(/',$value)){return MySQL::C_DATATYPE_SPECIAL_LINESTRING;}if(preg_match('/^POLYGON\(/',$value)){return MySQL::C_DATATYPE_SPECIAL_POLYGON;}}if($value===FALSE||$value===TRUE||$value==='0'||$value==='1'){return MySQL::C_DATATYPE_BOOL;}if(is_float($value))return self::C_DATATYPE_DOUBLE;if(!$this->startsWithZeros($value)){if(is_numeric($value)&&(floor($value)==$value)&&$value>=0&&$value<=4294967295){return MySQL::C_DATATYPE_UINT32;}if(is_numeric($value)){return MySQL::C_DATATYPE_DOUBLE;}}if(mb_strlen($value,'UTF-8')<=191){return MySQL::C_DATATYPE_TEXT7;}if(mb_strlen($value,'UTF-8')<=255){return MySQL::C_DATATYPE_TEXT8;}if(mb_strlen($value,'UTF-8')<=65535){return MySQL::C_DATATYPE_TEXT16;}return MySQL::C_DATATYPE_TEXT32;}public function code($typedescription,$includeSpecials=FALSE){if(isset($this->sqltype_typeno[$typedescription])){$r=$this->sqltype_typeno[$typedescription];}else{$r=self::C_DATATYPE_SPECIFIED;}if($includeSpecials){return $r;}if($r>=QueryWriter::C_DATATYPE_RANGE_SPECIAL){return self::C_DATATYPE_SPECIFIED;}return $r;}public function addUniqueConstraint($type,$properties){$tableNoQ=$this->esc($type,TRUE);$columns=array();foreach($properties as $key=>$column)$columns[$key]=$this->esc($column);$table=$this->esc($type);sort($columns);$name='UQ_'.sha1(implode(',',$columns));try{$sql="ALTER TABLE $table
						 ADD UNIQUE INDEX $name (".implode(',',$columns).")";$this->adapter->exec($sql);}catch(SQLException $e){return FALSE;}return TRUE;}public function addIndex($type,$name,$property){try{$table=$this->esc($type);$name=preg_replace('/\W/','',$name);$column=$this->esc($property);$this->adapter->exec("CREATE INDEX $name ON $table ($column) ");return TRUE;}catch(SQLException $e){return FALSE;}}public function addFK($type,$targetType,$property,$targetProperty,$isDependent=FALSE){$table=$this->esc($type);$targetTable=$this->esc($targetType);$targetTableNoQ=$this->esc($targetType,TRUE);$field=$this->esc($property);$fieldNoQ=$this->esc($property,TRUE);$targetField=$this->esc($targetProperty);$targetFieldNoQ=$this->esc($targetProperty,TRUE);$tableNoQ=$this->esc($type,TRUE);$fieldNoQ=$this->esc($property,TRUE);if(!is_null($this->getForeignKeyForTypeProperty($tableNoQ,$fieldNoQ)))return FALSE;$columns=$this->getColumns($tableNoQ);$idType=$this->getTypeForID();if($this->code($columns[$fieldNoQ])!==$idType){$this->widenColumn($type,$property,$idType);}$fkName='fk_'.($tableNoQ.'_'.$fieldNoQ);$cName='c_'.$fkName;try{$this->adapter->exec("
				ALTER TABLE {$table}
				ADD CONSTRAINT $cName
				FOREIGN KEY $fkName ( {$fieldNoQ} ) REFERENCES {$targetTableNoQ}
				({$targetFieldNoQ}) ON DELETE ".($isDependent?'CASCADE':'SET NULL').' ON UPDATE '.($isDependent?'CASCADE':'SET NULL').';');}catch(SQLException $e){}}public function sqlStateIn($state,$list){$stateMap=array('42S02'=>QueryWriter::C_SQLSTATE_NO_SUCH_TABLE,'42S22'=>QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN,'23000'=>QueryWriter::C_SQLSTATE_INTEGRITY_CONSTRAINT_VIOLATION);return in_array((isset($stateMap[$state])?$stateMap[$state]:'0'),$list);}public function wipeAll(){$this->adapter->exec('SET FOREIGN_KEY_CHECKS = 0;');foreach($this->getTables()as $t){try{$this->adapter->exec("DROP TABLE IF EXISTS `$t`");}catch(SQLException $e){}try{$this->adapter->exec("DROP VIEW IF EXISTS `$t`");}catch(SQLException $e){}}$this->adapter->exec('SET FOREIGN_KEY_CHECKS = 1;');}}}namespace RedBeanPHP\QueryWriter{use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\Adapter as Adapter;use RedBeanPHP\RedException\SQL as SQLException;class SQLiteT extends AQueryWriter implements QueryWriter{const C_DATATYPE_INTEGER=0;const C_DATATYPE_NUMERIC=1;const C_DATATYPE_TEXT=2;const C_DATATYPE_SPECIFIED=99;protected $adapter;protected $quoteCharacter='`';protected function getTable($type){$tableName=$this->esc($type,TRUE);$columns=$this->getColumns($type);$indexes=$this->getIndexes($type);$keys=$this->getKeyMapForType($type);$table=array('columns'=>$columns,'indexes'=>$indexes,'keys'=>$keys,'name'=>$tableName);$this->tableArchive[$tableName]=$table;return $table;}protected function putTable($tableMap){$table=$tableMap['name'];$q=array();$q[]="DROP TABLE IF EXISTS tmp_backup;";$oldColumnNames=array_keys($this->getColumns($table));foreach($oldColumnNames as $k=>$v)$oldColumnNames[$k]="`$v`";$q[]="CREATE TEMPORARY TABLE tmp_backup(".implode(",",$oldColumnNames).");";$q[]="INSERT INTO tmp_backup SELECT * FROM `$table`;";$q[]="PRAGMA foreign_keys = 0 ";$q[]="DROP TABLE `$table`;";$newTableDefStr='';foreach($tableMap['columns']as $column=>$type){if($column!='id'){$newTableDefStr.=",`$column` $type";}}$fkDef='';foreach($tableMap['keys']as $key){$fkDef.=", FOREIGN KEY(`{$key['from']}`)
						 REFERENCES `{$key['table']}`(`{$key['to']}`)
						 ON DELETE {$key['on_delete']} ON UPDATE {$key['on_update']}";}$q[]="CREATE TABLE `$table` ( `id` INTEGER PRIMARY KEY AUTOINCREMENT  $newTableDefStr  $fkDef );";foreach($tableMap['indexes']as $name=>$index){if(strpos($name,'UQ_')===0){$cols=explode('__',substr($name,strlen('UQ_'.$table)));foreach($cols as $k=>$v)$cols[$k]="`$v`";$q[]="CREATE UNIQUE INDEX $name ON `$table` (".implode(',',$cols).")";}else $q[]="CREATE INDEX $name ON `$table` ({$index['name']}) ";}$q[]="INSERT INTO `$table` SELECT * FROM tmp_backup;";$q[]="DROP TABLE tmp_backup;";$q[]="PRAGMA foreign_keys = 1 ";foreach($q as $sq)$this->adapter->exec($sq);}protected function getIndexes($type){$table=$this->esc($type,TRUE);$indexes=$this->adapter->get("PRAGMA index_list('$table')");$indexInfoList=array();foreach($indexes as $i){$indexInfoList[$i['name']]=$this->adapter->getRow("PRAGMA index_info('{$i['name']}') ");$indexInfoList[$i['name']]['unique']=$i['unique'];}return $indexInfoList;}protected function buildFK($type,$targetType,$property,$targetProperty,$constraint=FALSE){$table=$this->esc($type,TRUE);$targetTable=$this->esc($targetType,TRUE);$column=$this->esc($property,TRUE);$targetColumn=$this->esc($targetProperty,TRUE);$tables=$this->getTables();if(!in_array($targetTable,$tables))return FALSE;if(!is_null($this->getForeignKeyForTypeProperty($table,$column)))return FALSE;$t=$this->getTable($table);$consSQL=($constraint?'CASCADE':'SET NULL');$label='from_'.$column.'_to_table_'.$targetTable.'_col_'.$targetColumn;$t['keys'][$label]=array('table'=>$targetTable,'from'=>$column,'to'=>$targetColumn,'on_update'=>$consSQL,'on_delete'=>$consSQL);$this->putTable($t);return TRUE;}protected function getKeyMapForType($type){$table=$this->esc($type,TRUE);$keys=$this->adapter->get("PRAGMA foreign_key_list('$table')");$keyInfoList=array();foreach($keys as $k){$label=$this->makeFKLabel($k['from'],$k['table'],$k['to']);$keyInfoList[$label]=array('name'=>$label,'from'=>$k['from'],'table'=>$k['table'],'to'=>$k['to'],'on_update'=>$k['on_update'],'on_delete'=>$k['on_delete']);}return $keyInfoList;}public function __construct(Adapter $adapter){$this->typeno_sqltype=array(SQLiteT::C_DATATYPE_INTEGER=>'INTEGER',SQLiteT::C_DATATYPE_NUMERIC=>'NUMERIC',SQLiteT::C_DATATYPE_TEXT=>'TEXT',);$this->sqltype_typeno=array();foreach($this->typeno_sqltype as $k=>$v){$this->sqltype_typeno[$v]=$k;}$this->adapter=$adapter;}public function getTypeForID(){return self::C_DATATYPE_INTEGER;}public function scanType($value,$flagSpecial=FALSE){$this->svalue=$value;if($value===NULL)return self::C_DATATYPE_INTEGER;if($value===INF)return self::C_DATATYPE_TEXT;if($this->startsWithZeros($value))return self::C_DATATYPE_TEXT;if($value===TRUE||$value===FALSE)return self::C_DATATYPE_INTEGER;if(is_numeric($value)&&(intval($value)==$value)&&$value<2147483648&&$value>-2147483648)return self::C_DATATYPE_INTEGER;if((is_numeric($value)&&$value<2147483648&&$value>-2147483648)||preg_match('/\d{4}\-\d\d\-\d\d/',$value)||preg_match('/\d{4}\-\d\d\-\d\d\s\d\d:\d\d:\d\d/',$value)){return self::C_DATATYPE_NUMERIC;}return self::C_DATATYPE_TEXT;}public function addColumn($table,$column,$type){$column=$this->check($column);$table=$this->check($table);$type=$this->typeno_sqltype[$type];$this->adapter->exec("ALTER TABLE `$table` ADD `$column` $type ");}public function code($typedescription,$includeSpecials=FALSE){$r=((isset($this->sqltype_typeno[$typedescription]))?$this->sqltype_typeno[$typedescription]:99);return $r;}public function widenColumn($type,$column,$datatype){$t=$this->getTable($type);$t['columns'][$column]=$this->typeno_sqltype[$datatype];$this->putTable($t);}public function getTables(){return $this->adapter->getCol("SELECT name FROM sqlite_master
			WHERE type='table' AND name!='sqlite_sequence';");}public function createTable($table){$table=$this->esc($table);$sql="CREATE TABLE $table ( id INTEGER PRIMARY KEY AUTOINCREMENT ) ";$this->adapter->exec($sql);}public function getColumns($table){$table=$this->esc($table,TRUE);$columnsRaw=$this->adapter->get("PRAGMA table_info('$table')");$columns=array();foreach($columnsRaw as $r)$columns[$r['name']]=$r['type'];return $columns;}public function addUniqueConstraint($type,$properties){$tableNoQ=$this->esc($type,TRUE);$name='UQ_'.$this->esc($type,TRUE).implode('__',$properties);$t=$this->getTable($type);$t['indexes'][$name]=array('name'=>$name);try{$this->putTable($t);}catch(SQLException $e){return FALSE;}return TRUE;}public function sqlStateIn($state,$list){$stateMap=array('HY000'=>QueryWriter::C_SQLSTATE_NO_SUCH_TABLE,'23000'=>QueryWriter::C_SQLSTATE_INTEGRITY_CONSTRAINT_VIOLATION);return in_array((isset($stateMap[$state])?$stateMap[$state]:'0'),$list);}public function addIndex($type,$name,$column){$columns=$this->getColumns($type);if(!isset($columns[$column]))return FALSE;$table=$this->esc($type);$name=preg_replace('/\W/','',$name);$column=$this->esc($column,TRUE);try{$t=$this->getTable($type);$t['indexes'][$name]=array('name'=>$column);$this->putTable($t);return TRUE;}catch(SQLException $exception){return FALSE;}}public function wipe($type){$table=$this->esc($type);$this->adapter->exec("DELETE FROM $table ");}public function addFK($type,$targetType,$property,$targetProperty,$isDep=FALSE){return $this->buildFK($type,$targetType,$property,$targetProperty,$isDep);}public function wipeAll(){$this->adapter->exec('PRAGMA foreign_keys = 0 ');foreach($this->getTables()as $t){try{$this->adapter->exec("DROP TABLE IF EXISTS `$t`");}catch(SQLException $e){}try{$this->adapter->exec("DROP TABLE IF EXISTS `$t`");}catch(SQLException $e){}}$this->adapter->exec('PRAGMA foreign_keys = 1 ');}}}namespace RedBeanPHP\QueryWriter{use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\Adapter as Adapter;use RedBeanPHP\RedException\SQL as SQLException;class PostgreSQL extends AQueryWriter implements QueryWriter{const C_DATATYPE_INTEGER=0;const C_DATATYPE_DOUBLE=1;const C_DATATYPE_TEXT=3;const C_DATATYPE_SPECIAL_DATE=80;const C_DATATYPE_SPECIAL_DATETIME=81;const C_DATATYPE_SPECIAL_POINT=90;const C_DATATYPE_SPECIAL_LSEG=91;const C_DATATYPE_SPECIAL_CIRCLE=92;const C_DATATYPE_SPECIAL_MONEY=93;const C_DATATYPE_SPECIAL_POLYGON=94;const C_DATATYPE_SPECIFIED=99;protected $adapter;protected $quoteCharacter='"';protected $defaultValue='DEFAULT';protected function getInsertSuffix($table){return 'RETURNING id ';}protected function getKeyMapForType($type){$table=$this->esc($type,TRUE);$keys=$this->adapter->get('
			SELECT
			information_schema.key_column_usage.constraint_name AS "name",
			information_schema.key_column_usage.column_name AS "from",
			information_schema.constraint_table_usage.table_name AS "table",
			information_schema.constraint_column_usage.column_name AS "to",
			information_schema.referential_constraints.update_rule AS "on_update",
			information_schema.referential_constraints.delete_rule AS "on_delete"
				FROM information_schema.key_column_usage
			INNER JOIN information_schema.constraint_table_usage
				ON (
					information_schema.key_column_usage.constraint_name = information_schema.constraint_table_usage.constraint_name
					AND information_schema.key_column_usage.constraint_schema = information_schema.constraint_table_usage.constraint_schema
					AND information_schema.key_column_usage.constraint_catalog = information_schema.constraint_table_usage.constraint_catalog
				)
			INNER JOIN information_schema.constraint_column_usage
				ON (
					information_schema.key_column_usage.constraint_name = information_schema.constraint_column_usage.constraint_name
					AND information_schema.key_column_usage.constraint_schema = information_schema.constraint_column_usage.constraint_schema
					AND information_schema.key_column_usage.constraint_catalog = information_schema.constraint_column_usage.constraint_catalog
				)
			INNER JOIN information_schema.referential_constraints
				ON (
					information_schema.key_column_usage.constraint_name = information_schema.referential_constraints.constraint_name
					AND information_schema.key_column_usage.constraint_schema = information_schema.referential_constraints.constraint_schema
					AND information_schema.key_column_usage.constraint_catalog = information_schema.referential_constraints.constraint_catalog
				)
			WHERE
				information_schema.key_column_usage.table_catalog = current_database()
				AND information_schema.key_column_usage.table_schema = ANY( current_schemas( FALSE ) )
				AND information_schema.key_column_usage.table_name = ?
		',array($type));$keyInfoList=array();foreach($keys as $k){$label=$this->makeFKLabel($k['from'],$k['table'],$k['to']);$keyInfoList[$label]=array('name'=>$k['name'],'from'=>$k['from'],'table'=>$k['table'],'to'=>$k['to'],'on_update'=>$k['on_update'],'on_delete'=>$k['on_delete']);}return $keyInfoList;}public function __construct(Adapter $adapter){$this->typeno_sqltype=array(self::C_DATATYPE_INTEGER=>' integer ',self::C_DATATYPE_DOUBLE=>' double precision ',self::C_DATATYPE_TEXT=>' text ',self::C_DATATYPE_SPECIAL_DATE=>' date ',self::C_DATATYPE_SPECIAL_DATETIME=>' timestamp without time zone ',self::C_DATATYPE_SPECIAL_POINT=>' point ',self::C_DATATYPE_SPECIAL_LSEG=>' lseg ',self::C_DATATYPE_SPECIAL_CIRCLE=>' circle ',self::C_DATATYPE_SPECIAL_MONEY=>' money ',self::C_DATATYPE_SPECIAL_POLYGON=>' polygon ',);$this->sqltype_typeno=array();foreach($this->typeno_sqltype as $k=>$v){$this->sqltype_typeno[trim(strtolower($v))]=$k;}$this->adapter=$adapter;}public function getTypeForID(){return self::C_DATATYPE_INTEGER;}public function getTables(){return $this->adapter->getCol('SELECT table_name FROM information_schema.tables WHERE table_schema = ANY( current_schemas( FALSE ) )');}public function createTable($table){$table=$this->esc($table);$this->adapter->exec(" CREATE TABLE $table (id SERIAL PRIMARY KEY); ");}public function getColumns($table){$table=$this->esc($table,TRUE);$columnsRaw=$this->adapter->get("SELECT column_name, data_type FROM information_schema.columns WHERE table_name='$table'");$columns=array();foreach($columnsRaw as $r){$columns[$r['column_name']]=$r['data_type'];}return $columns;}public function scanType($value,$flagSpecial=FALSE){$this->svalue=$value;if($value===INF)return self::C_DATATYPE_TEXT;if($flagSpecial&&$value){if(preg_match('/^\d{4}\-\d\d-\d\d$/',$value)){return PostgreSQL::C_DATATYPE_SPECIAL_DATE;}if(preg_match('/^\d{4}\-\d\d-\d\d\s\d\d:\d\d:\d\d(\.\d{1,6})?$/',$value)){return PostgreSQL::C_DATATYPE_SPECIAL_DATETIME;}if(preg_match('/^\([\d\.]+,[\d\.]+\)$/',$value)){return PostgreSQL::C_DATATYPE_SPECIAL_POINT;}if(preg_match('/^\[\([\d\.]+,[\d\.]+\),\([\d\.]+,[\d\.]+\)\]$/',$value)){return PostgreSQL::C_DATATYPE_SPECIAL_LSEG;}if(preg_match('/^\<\([\d\.]+,[\d\.]+\),[\d\.]+\>$/',$value)){return PostgreSQL::C_DATATYPE_SPECIAL_CIRCLE;}if(preg_match('/^\((\([\d\.]+,[\d\.]+\),?)+\)$/',$value)){return PostgreSQL::C_DATATYPE_SPECIAL_POLYGON;}if(preg_match('/^\-?(\$|&#1074;‚¬|&#1042;&#1168;|&#1042;&#1032;)[\d,\.]+$/',$value)){return PostgreSQL::C_DATATYPE_SPECIAL_MONEY;}}if(is_float($value))return self::C_DATATYPE_DOUBLE;if($this->startsWithZeros($value))return self::C_DATATYPE_TEXT;if($value===FALSE||$value===TRUE||$value===NULL||(is_numeric($value)&&AQueryWriter::canBeTreatedAsInt($value)&&$value<2147483648&&$value>-2147483648)){return self::C_DATATYPE_INTEGER;}elseif(is_numeric($value)){return self::C_DATATYPE_DOUBLE;}else{return self::C_DATATYPE_TEXT;}}public function code($typedescription,$includeSpecials=FALSE){$r=(isset($this->sqltype_typeno[$typedescription]))?$this->sqltype_typeno[$typedescription]:99;if($includeSpecials)return $r;if($r>=QueryWriter::C_DATATYPE_RANGE_SPECIAL){return self::C_DATATYPE_SPECIFIED;}return $r;}public function widenColumn($type,$column,$datatype){$table=$type;$type=$datatype;$table=$this->esc($table);$column=$this->esc($column);$newtype=$this->typeno_sqltype[$type];$this->adapter->exec("ALTER TABLE $table \n\t ALTER COLUMN $column TYPE $newtype ");}public function addUniqueConstraint($type,$properties){$tableNoQ=$this->esc($type,TRUE);$columns=array();foreach($properties as $key=>$column)$columns[$key]=$this->esc($column);$table=$this->esc($type);sort($columns);$name="UQ_".sha1($table.implode(',',$columns));$sql="ALTER TABLE {$table}
                ADD CONSTRAINT $name UNIQUE (".implode(',',$columns).")";try{$this->adapter->exec($sql);}catch(SQLException $e){return FALSE;}return TRUE;}public function sqlStateIn($state,$list){$stateMap=array('42P01'=>QueryWriter::C_SQLSTATE_NO_SUCH_TABLE,'42703'=>QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN,'23505'=>QueryWriter::C_SQLSTATE_INTEGRITY_CONSTRAINT_VIOLATION);return in_array((isset($stateMap[$state])?$stateMap[$state]:'0'),$list);}public function addIndex($type,$name,$property){$table=$this->esc($type);$name=preg_replace('/\W/','',$name);$column=$this->esc($property);try{$this->adapter->exec("CREATE INDEX {$name} ON $table ({$column}) ");return TRUE;}catch(SQLException $e){return FALSE;}}public function addFK($type,$targetType,$property,$targetProperty,$isDep=FALSE){$table=$this->esc($type);$targetTable=$this->esc($targetType);$field=$this->esc($property);$targetField=$this->esc($targetProperty);$tableNoQ=$this->esc($type,TRUE);$fieldNoQ=$this->esc($property,TRUE);if(!is_null($this->getForeignKeyForTypeProperty($tableNoQ,$fieldNoQ)))return FALSE;try{$delRule=($isDep?'CASCADE':'SET NULL');$this->adapter->exec("ALTER TABLE {$table}
				ADD FOREIGN KEY ( {$field} ) REFERENCES  {$targetTable}
				({$targetField}) ON DELETE {$delRule} ON UPDATE {$delRule} DEFERRABLE ;");return TRUE;}catch(SQLException $e){return FALSE;}}public function wipeAll(){$this->adapter->exec('SET CONSTRAINTS ALL DEFERRED');foreach($this->getTables()as $t){$t=$this->esc($t);$this->adapter->exec("DROP TABLE IF EXISTS $t CASCADE ");}$this->adapter->exec('SET CONSTRAINTS ALL IMMEDIATE');}}}namespace RedBeanPHP{class RedException extends\Exception{}}namespace RedBeanPHP\RedException{use RedBeanPHP\RedException as RedException;class SQL extends RedException{private $sqlState;public function getSQLState(){return $this->sqlState;}public function setSQLState($sqlState){$this->sqlState=$sqlState;}public function __toString(){return'['.$this->getSQLState().'] - '.$this->getMessage()."\n".'trace: '.$this->getTraceAsString();}}}namespace RedBeanPHP{use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\Observable as Observable;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\BeanHelper\FacadeBeanHelper as FacadeBeanHelper;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\SimpleModel as SimpleModel;use RedBeanPHP\BeanHelper as BeanHelper;use RedBeanPHP\RedException\SQL as SQLException;use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\OODB as OODB;use RedBeanPHP\Cursor as Cursor;use RedBeanPHP\Cursor\NullCursor as NullCursor;abstract class Repository{protected $stash=NULL;protected $nesting=0;protected $writer;protected function storeBeanWithLists(OODBBean $bean){$sharedAdditions=$sharedTrashcan=$sharedresidue=$sharedItems=$ownAdditions=$ownTrashcan=$ownresidue=$embeddedBeans=array();foreach($bean as $property=>$value){$value=($value instanceof SimpleModel)?$value->unbox():$value;if($value instanceof OODBBean){$this->processEmbeddedBean($embeddedBeans,$bean,$property,$value);$bean->setMeta("sys.typeof.{$property}",$value->getMeta('type'));}elseif(is_array($value)){$originals=$bean->moveMeta('sys.shadow.'.$property,array());if(strpos($property,'own')===0){list($ownAdditions,$ownTrashcan,$ownresidue)=$this->processGroups($originals,$value,$ownAdditions,$ownTrashcan,$ownresidue);$listName=lcfirst(substr($property,3));if($bean->moveMeta('sys.exclusive-'.$listName)){OODBBean::setMetaAll($ownTrashcan,'sys.garbage',TRUE);OODBBean::setMetaAll($ownAdditions,'sys.buildcommand.fkdependson',$bean->getMeta('type'));}unset($bean->$property);}elseif(strpos($property,'shared')===0){list($sharedAdditions,$sharedTrashcan,$sharedresidue)=$this->processGroups($originals,$value,$sharedAdditions,$sharedTrashcan,$sharedresidue);unset($bean->$property);}}}$this->storeBean($bean);$this->processTrashcan($bean,$ownTrashcan);$this->processAdditions($bean,$ownAdditions);$this->processResidue($ownresidue);$this->processSharedTrashcan($bean,$sharedTrashcan);$this->processSharedAdditions($bean,$sharedAdditions);$this->processSharedResidue($bean,$sharedresidue);}protected function processGroups($originals,$current,$additions,$trashcan,$residue){return array(array_merge($additions,array_diff($current,$originals)),array_merge($trashcan,array_diff($originals,$current)),array_merge($residue,array_intersect($current,$originals)));}protected function prepareEmbeddedBean($embeddedBean){if(!$embeddedBean->id||$embeddedBean->getMeta('tainted')){$this->store($embeddedBean);}return $embeddedBean->id;}protected function processSharedAdditions($bean,$sharedAdditions){foreach($sharedAdditions as $addition){if($addition instanceof OODBBean){$this->oodb->getAssociationManager()->associate($addition,$bean);}else{throw new RedException('Array may only contain OODBBeans');}}}protected function processResidue($ownresidue){foreach($ownresidue as $residue){if($residue->getMeta('tainted')){$this->store($residue);}}}protected function processTrashcan($bean,$ownTrashcan){foreach($ownTrashcan as $trash){$myFieldLink=$bean->getMeta('type').'_id';$alias=$bean->getMeta('sys.alias.'.$trash->getMeta('type'));if($alias)$myFieldLink=$alias.'_id';if($trash->getMeta('sys.garbage')===true){$this->trash($trash);}else{$trash->$myFieldLink=NULL;$this->store($trash);}}}protected function processSharedTrashcan($bean,$sharedTrashcan){foreach($sharedTrashcan as $trash){$this->oodb->getAssociationManager()->unassociate($trash,$bean);}}protected function processSharedResidue($bean,$sharedresidue){foreach($sharedresidue as $residue){$this->store($residue);}}protected function hasListsOrObjects(OODBBean $bean){$processLists=FALSE;foreach($bean as $value){if(is_array($value)||is_object($value)){$processLists=TRUE;break;}}return $processLists;}protected function processEmbeddedBean(&$embeddedBeans,$bean,$property,OODBBean $value){$linkField=$property.'_id';$id=$this->prepareEmbeddedBean($value);if($bean->$linkField!=$id)$bean->$linkField=$id;$bean->setMeta('cast.'.$linkField,'id');$embeddedBeans[$linkField]=$value;unset($bean->$property);}public function __construct(OODB $oodb,QueryWriter $writer){$this->writer=$writer;$this->oodb=$oodb;}public function check(OODBBean $bean){if(!isset($bean->id)){throw new RedException('Bean has incomplete Meta Information id ');}if(!($bean->getMeta('type'))){throw new RedException('Bean has incomplete Meta Information II');}$pattern='/[^a-z0-9_]/i';if(preg_match($pattern,$bean->getMeta('type'))){throw new RedException('Bean Type is invalid');}foreach($bean as $prop=>$value){if(is_array($value)||(is_object($value))){throw new RedException("Invalid Bean value: property $prop");}else if(strlen($prop)<1||preg_match($pattern,$prop)){throw new RedException("Invalid Bean property: property $prop");}}}public function find($type,$conditions=array(),$sql=NULL,$bindings=array()){if(is_array($sql)){if(isset($sql[1])){$bindings=$sql[1];}$sql=$sql[0];}try{$beans=$this->convertToBeans($type,$this->writer->queryRecord($type,$conditions,$sql,$bindings));return $beans;}catch(SQLException $exception){$this->handleException($exception);}return array();}public function findCollection($type,$sql,$bindings=array()){try{$cursor=$this->writer->queryRecordWithCursor($type,$sql,$bindings);return new BeanCollection($type,$this,$cursor);}catch(SQLException $exception){$this->handleException($exception);}return new BeanCollection($type,$this,new NullCursor);}public function store($bean){$processLists=$this->hasListsOrObjects($bean);if(!$processLists&&!$bean->getMeta('tainted')){return $bean->getID();}$this->oodb->signal('update',$bean);$processLists=$this->hasListsOrObjects($bean);if($processLists){$this->storeBeanWithLists($bean);}else{$this->storeBean($bean);}$this->oodb->signal('after_update',$bean);return((string) $bean->id===(string) (int) $bean->id)?(int) $bean->id:(string) $bean->id;}public function batch($type,$ids){if(!$ids){return array();}$collection=array();try{$rows=$this->writer->queryRecord($type,array('id'=>$ids));}catch(SQLException $e){$this->handleException($e);$rows=FALSE;}$this->stash[$this->nesting]=array();if(!$rows){return array();}foreach($rows as $row){$this->stash[$this->nesting][$row['id']]=$row;}foreach($ids as $id){$collection[$id]=$this->load($type,$id);}$this->stash[$this->nesting]=NULL;return $collection;}public function convertToBeans($type,$rows){$collection=array();$this->stash[$this->nesting]=array();foreach($rows as $row){$id=$row['id'];$this->stash[$this->nesting][$id]=$row;$collection[$id]=$this->load($type,$id);}$this->stash[$this->nesting]=NULL;return $collection;}public function count($type,$addSQL='',$bindings=array()){$type=AQueryWriter::camelsSnake($type);if(count(explode('_',$type))>2){throw new RedException('Invalid type for count.');}try{return (int) $this->writer->queryRecordCount($type,array(),$addSQL,$bindings);}catch(SQLException $exception){if(!$this->writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_NO_SUCH_TABLE,QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN))){throw $exception;}}return0;}public function trash($bean){$this->oodb->signal('delete',$bean);foreach($bean as $property=>$value){if($value instanceof OODBBean){unset($bean->$property);}if(is_array($value)){if(strpos($property,'own')===0){unset($bean->$property);}elseif(strpos($property,'shared')===0){unset($bean->$property);}}}try{$this->writer->deleteRecord($bean->getMeta('type'),array('id'=>array($bean->id)),NULL);}catch(SQLException $exception){$this->handleException($exception);}$bean->id=0;$this->oodb->signal('after_delete',$bean);}public function tableExists($table){return $this->writer->tableExists($table);}public function wipe($type){try{$this->writer->wipe($type);return TRUE;}catch(SQLException $exception){if(!$this->writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_NO_SUCH_TABLE))){throw $exception;}return FALSE;}}}}namespace RedBeanPHP\Repository{use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\Observable as Observable;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\BeanHelper\FacadeBeanHelper as FacadeBeanHelper;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\RedException as RedException;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\SimpleModel as SimpleModel;use RedBeanPHP\BeanHelper as BeanHelper;use RedBeanPHP\RedException\SQL as SQLException;use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\Repository as Repository;class Fluid extends Repository{private function getTypeFromCast($cast){if($cast=='string'){$typeno=$this->writer->scanType('STRING');}elseif($cast=='id'){$typeno=$this->writer->getTypeForID();}elseif(isset($this->writer->sqltype_typeno[$cast])){$typeno=$this->writer->sqltype_typeno[$cast];}else{throw new RedException('Invalid Cast');}return $typeno;}private function createTableIfNotExists(OODBBean $bean,$table){if(!$this->tableExists($this->writer->esc($table,TRUE))){$this->writer->createTable($table);$bean->setMeta('buildreport.flags.created',TRUE);}}private function modifySchema(OODBBean $bean,$property,$value){$doFKStuff=FALSE;$table=$bean->getMeta('type');$columns=$this->writer->getColumns($table);$columnNoQ=$this->writer->esc($property,TRUE);if(!$this->oodb->isChilled($bean->getMeta('type'))){if($bean->getMeta("cast.$property",-1)!==-1){$cast=$bean->getMeta("cast.$property");$typeno=$this->getTypeFromCast($cast);}else{$cast=FALSE;$typeno=$this->writer->scanType($value,TRUE);}if(isset($columns[$this->writer->esc($property,TRUE)])){if(!$cast){$typeno=$this->writer->scanType($value,FALSE);}$sqlt=$this->writer->code($columns[$this->writer->esc($property,TRUE)]);if($typeno>$sqlt){$this->writer->widenColumn($table,$property,$typeno);$bean->setMeta('buildreport.flags.widen',TRUE);$doFKStuff=TRUE;}}else{$this->writer->addColumn($table,$property,$typeno);$bean->setMeta('buildreport.flags.addcolumn',TRUE);$doFKStuff=TRUE;}if($doFKStuff){if(strrpos($columnNoQ,'_id')===(strlen($columnNoQ)-3)){$destinationColumnNoQ=substr($columnNoQ,0,strlen($columnNoQ)-3);$indexName="index_foreignkey_{$table}_{$destinationColumnNoQ}";$this->writer->addIndex($table,$indexName,$columnNoQ);$typeof=$bean->getMeta("sys.typeof.{$destinationColumnNoQ}",$destinationColumnNoQ);$isLink=$bean->getMeta('sys.buildcommand.unique',FALSE);$isDep=($bean->moveMeta('sys.buildcommand.fkdependson')===$typeof||is_array($isLink));$result=$this->writer->addFK($table,$typeof,$columnNoQ,'id',$isDep);if(is_array($isLink)&&!count(array_diff($isLink,array_keys($this->writer->getColumns($table))))){$this->writer->addUniqueConstraint($table,$bean->moveMeta('sys.buildcommand.unique'));$bean->setMeta("sys.typeof.{$destinationColumnNoQ}",NULL);}}}}}protected function processAdditions($bean,$ownAdditions){$beanType=$bean->getMeta('type');foreach($ownAdditions as $addition){if($addition instanceof OODBBean){$myFieldLink=$beanType.'_id';$alias=$bean->getMeta('sys.alias.'.$addition->getMeta('type'));if($alias)$myFieldLink=$alias.'_id';$addition->$myFieldLink=$bean->id;$addition->setMeta('cast.'.$myFieldLink,'id');if($alias){$addition->setMeta("sys.typeof.{$alias}",$beanType);}else{$addition->setMeta("sys.typeof.{$beanType}",$beanType);}$this->store($addition);}else{throw new RedException('Array may only contain OODBBeans');}}}protected function storeBean(OODBBean $bean){if($bean->getMeta('changed')){$this->check($bean);$table=$bean->getMeta('type');$this->createTableIfNotExists($bean,$table);$updateValues=array();foreach($bean as $property=>$value){if($property!=='id'){$this->modifySchema($bean,$property,$value);}if($property!=='id'){$updateValues[]=array('property'=>$property,'value'=>$value);}}$bean->id=$this->writer->updateRecord($table,$updateValues,$bean->id);$bean->setMeta('changed',FALSE);}$bean->setMeta('tainted',FALSE);}protected function handleException(\Exception $exception){if(!$this->writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_NO_SUCH_TABLE,QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN))){throw $exception;}}public function dispense($type,$number=1,$alwaysReturnArray=FALSE){$OODBBEAN=defined('REDBEAN_OODBBEAN_CLASS')?REDBEAN_OODBBEAN_CLASS:'\RedBeanPHP\OODBBean';$beans=array();for($i=0;$i<$number;$i++){$bean=new $OODBBEAN;$bean->initializeForDispense($type,$this->oodb->getBeanHelper());$this->check($bean);$this->oodb->signal('dispense',$bean);$beans[]=$bean;}return(count($beans)===1&&!$alwaysReturnArray)?array_pop($beans):$beans;}public function load($type,$id){$bean=$this->dispense($type);if(isset($this->stash[$this->nesting][$id])){$row=$this->stash[$this->nesting][$id];}else{try{$rows=$this->writer->queryRecord($type,array('id'=>array($id)));}catch(SQLException $exception){if($this->writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN,QueryWriter::C_SQLSTATE_NO_SUCH_TABLE))){$rows=0;}}if(empty($rows)){return $bean;}$row=array_pop($rows);}$bean->importRow($row);$this->nesting++;$this->oodb->signal('open',$bean);$this->nesting--;return $bean->setMeta('tainted',FALSE);}}}namespace RedBeanPHP\Repository{use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\Observable as Observable;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\BeanHelper\FacadeBeanHelper as FacadeBeanHelper;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\RedException as RedException;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\SimpleModel as SimpleModel;use RedBeanPHP\BeanHelper as BeanHelper;use RedBeanPHP\RedException\SQL as SQLException;use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\Repository as Repository;class Frozen extends Repository{protected function handleException(\Exception $exception){throw $exception;}protected function storeBean(OODBBean $bean){if($bean->getMeta('changed')){list($properties,$table)=$bean->getPropertiesAndType();$id=$properties['id'];unset($properties['id']);$updateValues=array();$k1='property';$k2='value';foreach($properties as $key=>$value){$updateValues[]=array($k1=>$key,$k2=>$value);}$bean->id=$this->writer->updateRecord($table,$updateValues,$id);$bean->setMeta('changed',FALSE);}$bean->setMeta('tainted',FALSE);}protected function processAdditions($bean,$ownAdditions){$beanType=$bean->getMeta('type');$cachedIndex=array();foreach($ownAdditions as $addition){if($addition instanceof OODBBean){$myFieldLink=$beanType.'_id';$alias=$bean->getMeta('sys.alias.'.$addition->getMeta('type'));if($alias)$myFieldLink=$alias.'_id';$addition->$myFieldLink=$bean->id;$addition->setMeta('cast.'.$myFieldLink,'id');$this->store($addition);}else{throw new RedException('Array may only contain OODBBeans');}}}public function dispense($type,$number=1,$alwaysReturnArray=FALSE){$OODBBEAN=defined('REDBEAN_OODBBEAN_CLASS')?REDBEAN_OODBBEAN_CLASS:'\RedBeanPHP\OODBBean';$beans=array();for($i=0;$i<$number;$i++){$bean=new $OODBBEAN;$bean->initializeForDispense($type,$this->oodb->getBeanHelper());$this->oodb->signal('dispense',$bean);$beans[]=$bean;}return(count($beans)===1&&!$alwaysReturnArray)?array_pop($beans):$beans;}public function load($type,$id){$bean=$this->dispense($type);if(isset($this->stash[$this->nesting][$id])){$row=$this->stash[$this->nesting][$id];}else{try{$rows=$this->writer->queryRecord($type,array('id'=>array($id)));}catch(SQLException $exception){if($this->writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN,QueryWriter::C_SQLSTATE_NO_SUCH_TABLE))){throw $exception;}}if(empty($rows)){return $bean;}$row=array_pop($rows);}$bean->importRow($row);$this->nesting++;$this->oodb->signal('open',$bean);$this->nesting--;return $bean->setMeta('tainted',FALSE);}}}namespace RedBeanPHP{use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\Observable as Observable;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\BeanHelper\FacadeBeanHelper as FacadeBeanHelper;use RedBeanPHP\AssociationManager as AssociationManager;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\SimpleModel as SimpleModel;use RedBeanPHP\BeanHelper as BeanHelper;use RedBeanPHP\RedException\SQL as SQL;use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\Repository as Repository;use RedBeanPHP\Repository\Fluid as FluidRepo;use RedBeanPHP\Repository\Frozen as FrozenRepo;class OODB extends Observable{private static $sqlFilters=array();protected $chillList=array();protected $stash=NULL;protected $nesting=0;protected $writer;protected $isFrozen=FALSE;protected $beanhelper=NULL;protected $assocManager=NULL;protected $repository=NULL;protected $frozenRepository=NULL;protected $fluidRepository=NULL;protected function unboxIfNeeded($bean){if($bean instanceof SimpleModel){$bean=$bean->unbox();}if(!($bean instanceof OODBBean)){throw new RedException('OODB Store requires a bean, got: '.gettype($bean));}return $bean;}public function __construct(QueryWriter $writer,$frozen=FALSE){if($writer instanceof QueryWriter){$this->writer=$writer;}$this->freeze($frozen);}public function freeze($toggle){if(is_array($toggle)){$this->chillList=$toggle;$this->isFrozen=FALSE;}else{$this->isFrozen=(boolean) $toggle;}if($this->isFrozen){if(!$this->frozenRepository){$this->frozenRepository=new FrozenRepo($this,$this->writer);}$this->repository=$this->frozenRepository;}else{if(!$this->fluidRepository){$this->fluidRepository=new FluidRepo($this,$this->writer);}$this->repository=$this->fluidRepository;}if(count(self::$sqlFilters)){AQueryWriter::setSQLFilters(self::$sqlFilters,(!$this->isFrozen));}}public function isFrozen(){return (bool) $this->isFrozen;}public function isChilled($type){return (boolean)(in_array($type,$this->chillList));}public function dispense($type,$number=1,$alwaysReturnArray=FALSE){if($number<1){if($alwaysReturnArray)return array();return NULL;}return $this->repository->dispense($type,$number,$alwaysReturnArray);}public function setBeanHelper(BeanHelper $beanhelper){$this->beanhelper=$beanhelper;}public function getBeanHelper(){return $this->beanhelper;}public function check(OODBBean $bean){$this->repository->check($bean);}public function find($type,$conditions=array(),$sql=NULL,$bindings=array()){return $this->repository->find($type,$conditions,$sql,$bindings);}public function findCollection($type,$sql=NULL,$bindings=array()){return $this->repository->findCollection($type,$sql,$bindings);}public function tableExists($table){return $this->repository->tableExists($table);}public function store($bean){$bean=$this->unboxIfNeeded($bean);return $this->repository->store($bean);}public function load($type,$id){return $this->repository->load($type,$id);}public function trash($bean){$bean=$this->unboxIfNeeded($bean);return $this->repository->trash($bean);}public function batch($type,$ids){return $this->repository->batch($type,$ids);}public function convertToBeans($type,$rows){return $this->repository->convertToBeans($type,$rows);}public function count($type,$addSQL='',$bindings=array()){return $this->repository->count($type,$addSQL,$bindings);}public function wipe($type){return $this->repository->wipe($type);}public function getAssociationManager(){if(!isset($this->assocManager)){throw new RedException('No association manager available.');}return $this->assocManager;}public function setAssociationManager(AssociationManager $assocManager){$this->assocManager=$assocManager;}public function getCurrentRepository(){return $this->repository;}public function bindFunc($mode,$field,$function){list($type,$property)=explode('.',$field);$mode=($mode==='write')?QueryWriter::C_SQLFILTER_WRITE:QueryWriter::C_SQLFILTER_READ;if(!isset(self::$sqlFilters[$mode]))self::$sqlFilters[$mode]=array();if(!isset(self::$sqlFilters[$mode][$type]))self::$sqlFilters[$mode][$type]=array();if(is_null($function)){unset(self::$sqlFilters[$mode][$type][$property]);}else{if($mode===QueryWriter::C_SQLFILTER_WRITE){self::$sqlFilters[$mode][$type][$property]=$function.'(?)';}else{self::$sqlFilters[$mode][$type][$property]=$function."($field)";}}AQueryWriter::setSQLFilters(self::$sqlFilters,(!$this->isFrozen));}}}namespace RedBeanPHP{use RedBeanPHP\OODB as OODB;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\Adapter as Adapter;class ToolBox{protected $oodb;protected $writer;protected $adapter;public function __construct(OODB $oodb,Adapter $adapter,QueryWriter $writer){$this->oodb=$oodb;$this->adapter=$adapter;$this->writer=$writer;return $this;}public function getWriter(){return $this->writer;}public function getRedBean(){return $this->oodb;}public function getDatabaseAdapter(){return $this->adapter;}}}namespace RedBeanPHP{use RedBeanPHP\ToolBox as ToolBox;use RedBeanPHP\OODB as OODB;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\OODBBean as OODBBean;class Finder{protected $toolbox;protected $redbean;public function __construct(ToolBox $toolbox){$this->toolbox=$toolbox;$this->redbean=$toolbox->getRedBean();}public function find($type,$sql=NULL,$bindings=array()){if(!is_array($bindings)){throw new RedException('Expected array, '.gettype($bindings).' given.');}return $this->redbean->find($type,array(),$sql,$bindings);}public function findAndExport($type,$sql=NULL,$bindings=array()){$arr=array();foreach($this->find($type,$sql,$bindings)as $key=>$item){$arr[]=$item->export();}return $arr;}public function findOne($type,$sql=NULL,$bindings=array()){$sql=$this->toolbox->getWriter()->glueLimitOne($sql);$items=$this->find($type,$sql,$bindings);if(empty($items)){return NULL;}return reset($items);}public function findLast($type,$sql=NULL,$bindings=array()){$items=$this->find($type,$sql,$bindings);if(empty($items)){return NULL;}return end($items);}public function findOrDispense($type,$sql=NULL,$bindings=array()){$foundBeans=$this->find($type,$sql,$bindings);if(empty($foundBeans)){return array($this->redbean->dispense($type));}else{return $foundBeans;}}public function findCollection($type,$sql,$bindings=array()){return $this->redbean->findCollection($type,$sql,$bindings);}public function findOrCreate($type,$like=array()){$beans=$this->findLike($type,$like);if(count($beans)){$bean=reset($beans);return $bean;}$bean=$this->redbean->dispense($type);$bean->import($like);$this->redbean->store($bean);return $bean;}public function findLike($type,$conditions=array(),$sql=''){if(count($conditions)>0){foreach($conditions as $key=>$condition){if(!count($condition))unset($conditions[$key]);}}return $this->redbean->find($type,$conditions,$sql);}public function findMulti($types,$sql,$bindings=array(),$remappings=array(),$queryTemplate=' %s.%s AS %s__%s'){if(!is_array($types))$types=explode(',',$types);if(!is_array($sql)){$writer=$this->toolbox->getWriter();$adapter=$this->toolbox->getDatabaseAdapter();foreach($types as $type){$pattern=" {$type}.*";if(strpos($sql,$pattern)!==FALSE){$newSelectorArray=array();$columns=$writer->getColumns($type);foreach($columns as $column=>$definition){$newSelectorArray[]=sprintf($queryTemplate,$type,$column,$type,$column);}$newSelector=implode(',',$newSelectorArray);$sql=str_replace($pattern,$newSelector,$sql);}}$rows=$adapter->get($sql,$bindings);}else{$rows=$sql;}$wannaBeans=array();foreach($types as $type){$wannaBeans[$type]=array();$prefix="{$type}__";foreach($rows as $rowkey=>$row){$wannaBean=array();foreach($row as $cell=>$value){if(strpos($cell,$prefix)===0){$property=substr($cell,strlen($prefix));unset($rows[$rowkey][$cell]);$wannaBean[$property]=$value;}}if(!isset($wannaBean['id']))continue;if(is_null($wannaBean['id']))continue;$wannaBeans[$type][$wannaBean['id']]=$wannaBean;}}$beans=array();foreach($wannaBeans as $type=>$wannabees){$beans[$type]=$this->redbean->convertToBeans($type,$wannabees);}foreach($remappings as $remapping){$a=$remapping['a'];$b=$remapping['b'];$matcher=$remapping['matcher'];$do=$remapping['do'];foreach($beans[$a]as $bean){foreach($beans[$b]as $putBean){if($matcher($bean,$putBean,$beans))$do($bean,$putBean,$beans,$remapping);}}}return $beans;}}}namespace RedBeanPHP{use RedBeanPHP\Observable as Observable;use RedBeanPHP\OODB as OODB;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\RedException as RedException;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\RedException\SQL as SQLException;use RedBeanPHP\ToolBox as ToolBox;class AssociationManager extends Observable{protected $oodb;protected $adapter;protected $writer;private function handleException(\Exception $exception){if($this->oodb->isFrozen()||!$this->writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_NO_SUCH_TABLE,QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN))){throw $exception;}}private function relatedRows($bean,$type,$sql='',$bindings=array()){$ids=array($bean->id);$sourceType=$bean->getMeta('type');try{return $this->writer->queryRecordRelated($sourceType,$type,$ids,$sql,$bindings);}catch(SQLException $exception){$this->handleException($exception);return array();}}protected function associateBeans(OODBBean $bean1,OODBBean $bean2,OODBBean $bean){$type=$bean->getMeta('type');$property1=$bean1->getMeta('type').'_id';$property2=$bean2->getMeta('type').'_id';if($property1==$property2){$property2=$bean2->getMeta('type').'2_id';}$this->oodb->store($bean1);$this->oodb->store($bean2);$bean->setMeta("cast.$property1","id");$bean->setMeta("cast.$property2","id");$bean->setMeta('sys.buildcommand.unique',array($property1,$property2));$bean->$property1=$bean1->id;$bean->$property2=$bean2->id;$results=array();try{$id=$this->oodb->store($bean);$results[]=$id;}catch(SQLException $exception){if(!$this->writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_INTEGRITY_CONSTRAINT_VIOLATION))){throw $exception;}}return $results;}public function __construct(ToolBox $tools){$this->oodb=$tools->getRedBean();$this->adapter=$tools->getDatabaseAdapter();$this->writer=$tools->getWriter();$this->toolbox=$tools;}public function getTable($types){return $this->writer->getAssocTable($types);}public function associate($beans1,$beans2){if(!is_array($beans1)){$beans1=array($beans1);}if(!is_array($beans2)){$beans2=array($beans2);}$results=array();foreach($beans1 as $bean1){foreach($beans2 as $bean2){$table=$this->getTable(array($bean1->getMeta('type'),$bean2->getMeta('type')));$bean=$this->oodb->dispense($table);$results[]=$this->associateBeans($bean1,$bean2,$bean);}}return(count($results)>1)?$results:reset($results);}public function relatedCount($bean,$type,$sql=NULL,$bindings=array()){if(!($bean instanceof OODBBean)){throw new RedException('Expected array or OODBBean but got:'.gettype($bean));}if(!$bean->id){return0;}$beanType=$bean->getMeta('type');try{return $this->writer->queryRecordCountRelated($beanType,$type,$bean->id,$sql,$bindings);}catch(SQLException $exception){$this->handleException($exception);return0;}}public function unassociate($beans1,$beans2,$fast=NULL){$beans1=(!is_array($beans1))?array($beans1):$beans1;$beans2=(!is_array($beans2))?array($beans2):$beans2;foreach($beans1 as $bean1){foreach($beans2 as $bean2){try{$this->oodb->store($bean1);$this->oodb->store($bean2);$type1=$bean1->getMeta('type');$type2=$bean2->getMeta('type');$row=$this->writer->queryRecordLink($type1,$type2,$bean1->id,$bean2->id);$linkType=$this->getTable(array($type1,$type2));if($fast){$this->writer->deleteRecord($linkType,array('id'=>$row['id']));return;}$beans=$this->oodb->convertToBeans($linkType,array($row));if(count($beans)>0){$bean=reset($beans);$this->oodb->trash($bean);}}catch(SQLException $exception){$this->handleException($exception);}}}}public function clearRelations(OODBBean $bean,$type){$this->oodb->store($bean);try{$this->writer->deleteRelations($bean->getMeta('type'),$type,$bean->id);}catch(SQLException $exception){$this->handleException($exception);}}public function related($bean,$type,$sql='',$bindings=array()){$sql=$this->writer->glueSQLCondition($sql);$rows=$this->relatedRows($bean,$type,$sql,$bindings);$links=array();foreach($rows as $key=>$row){if(!isset($links[$row['id']])){$links[$row['id']]=array();}$links[$row['id']][]=$row['linked_by'];unset($rows[$key]['linked_by']);}$beans=$this->oodb->convertToBeans($type,$rows);foreach($beans as $bean){$bean->setMeta('sys.belongs-to',$links[$bean->id]);}return $beans;}}}namespace RedBeanPHP{use RedBeanPHP\ToolBox as ToolBox;use RedBeanPHP\OODBBean as OODBBean;interface BeanHelper{public function getToolbox();public function getExtractedToolbox();public function getModelForBean(OODBBean $bean);}}namespace RedBeanPHP\BeanHelper{use RedBeanPHP\BeanHelper as BeanHelper;use RedBeanPHP\Facade as Facade;use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\SimpleModelHelper as SimpleModelHelper;class SimpleFacadeBeanHelper implements BeanHelper{private static $factory=null;public static function factory($modelClassName){$factory=self::$factory;return($factory)?$factory($modelClassName):new $modelClassName();}public static function setFactoryFunction($factory){self::$factory=$factory;}public function getToolbox(){return Facade::getToolBox();}public function getModelForBean(OODBBean $bean){$model=$bean->getMeta('type');$prefix=defined('REDBEAN_MODEL_PREFIX')?REDBEAN_MODEL_PREFIX:'\\Model_';if(strpos($model,'_')!==FALSE){$modelParts=explode('_',$model);$modelName='';foreach($modelParts as $part){$modelName.=ucfirst($part);}$modelName=$prefix.$modelName;if(!class_exists($modelName)){$modelName=$prefix.ucfirst($model);if(!class_exists($modelName)){return NULL;}}}else{$modelName=$prefix.ucfirst($model);if(!class_exists($modelName)){return NULL;}}$obj=self::factory($modelName);$obj->loadBean($bean);return $obj;}public function getExtractedToolbox(){return Facade::getExtractedToolbox();}}}namespace RedBeanPHP{use RedBeanPHP\OODBBean as OODBBean;class SimpleModel{protected $bean;public function loadBean(OODBBean $bean){$this->bean=$bean;}public function __get($prop){return $this->bean->$prop;}public function __set($prop,$value){$this->bean->$prop=$value;}public function __isset($key){return isset($this->bean->$key);}public function box(){return $this;}public function unbox(){return $this->bean;}}}namespace RedBeanPHP{use RedBeanPHP\Observer as Observer;use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\Observable as Observable;class SimpleModelHelper implements Observer{public function onEvent($eventName,$bean){$bean->$eventName();}public function attachEventListeners(Observable $observable){foreach(array('update','open','delete','after_delete','after_update','dispense')as $e){$observable->addEventListener($e,$this);}}}}namespace RedBeanPHP{use RedBeanPHP\ToolBox as ToolBox;use RedBeanPHP\AssociationManager as AssociationManager;use RedBeanPHP\OODBBean as OODBBean;class TagManager{protected $toolbox;protected $associationManager;protected $redbean;private function extractTagsIfNeeded($tagList){if($tagList!==FALSE&&!is_array($tagList)){$tags=explode(',',(string) $tagList);}else{$tags=$tagList;}return $tags;}protected function findTagByTitle($title){$beans=$this->redbean->find('tag',array('title'=>array($title)));if($beans){$bean=reset($beans);return $bean;}return NULL;}public function __construct(ToolBox $toolbox){$this->toolbox=$toolbox;$this->redbean=$toolbox->getRedBean();$this->associationManager=$this->redbean->getAssociationManager();}public function hasTag($bean,$tags,$all=FALSE){$foundtags=$this->tag($bean);$tags=$this->extractTagsIfNeeded($tags);$same=array_intersect($tags,$foundtags);if($all){return(implode(',',$same)===implode(',',$tags));}return (bool)(count($same)>0);}public function untag($bean,$tagList){$tags=$this->extractTagsIfNeeded($tagList);foreach($tags as $tag){if($t=$this->findTagByTitle($tag)){$this->associationManager->unassociate($bean,$t);}}}public function tag(OODBBean $bean,$tagList=NULL){if(is_null($tagList)){$tags=$bean->sharedTag;$foundTags=array();foreach($tags as $tag){$foundTags[]=$tag->title;}return $foundTags;}$this->associationManager->clearRelations($bean,'tag');$this->addTags($bean,$tagList);return $tagList;}public function addTags(OODBBean $bean,$tagList){$tags=$this->extractTagsIfNeeded($tagList);if($tagList===FALSE){return;}foreach($tags as $tag){if(!$t=$this->findTagByTitle($tag)){$t=$this->redbean->dispense('tag');$t->title=$tag;$this->redbean->store($t);}$this->associationManager->associate($bean,$t);}}public function tagged($beanType,$tagList,$sql='',$bindings=array()){$tags=$this->extractTagsIfNeeded($tagList);$records=$this->toolbox->getWriter()->queryTagged($beanType,$tags,FALSE,$sql,$bindings);return $this->redbean->convertToBeans($beanType,$records);}public function taggedAll($beanType,$tagList,$sql='',$bindings=array()){$tags=$this->extractTagsIfNeeded($tagList);$records=$this->toolbox->getWriter()->queryTagged($beanType,$tags,TRUE,$sql,$bindings);return $this->redbean->convertToBeans($beanType,$records);}}}namespace RedBeanPHP{use RedBeanPHP\ToolBox as ToolBox;use RedBeanPHP\OODBBean as OODBBean;class LabelMaker{protected $toolbox;public function __construct(ToolBox $toolbox){$this->toolbox=$toolbox;}public function dispenseLabels($type,$labels){$labelBeans=array();foreach($labels as $label){$labelBean=$this->toolbox->getRedBean()->dispense($type);$labelBean->name=$label;$labelBeans[]=$labelBean;}return $labelBeans;}public function gatherLabels($beans){$labels=array();foreach($beans as $bean){$labels[]=$bean->name;}sort($labels);return $labels;}public function enum($enum){$oodb=$this->toolbox->getRedBean();if(strpos($enum,':')===FALSE){$type=$enum;$value=FALSE;}else{list($type,$value)=explode(':',$enum);$value=preg_replace('/\W+/','_',strtoupper(trim($value)));}$values=$oodb->find($type);if($value===FALSE){return $values;}foreach($values as $enumItem){if($enumItem->name===$value)return $enumItem;}$newEnumItems=$this->dispenseLabels($type,array($value));$newEnumItem=reset($newEnumItems);$oodb->store($newEnumItem);return $newEnumItem;}}}namespace RedBeanPHP{use RedBeanPHP\ToolBox as ToolBox;use RedBeanPHP\OODB as OODB;use RedBeanPHP\QueryWriter as QueryWriter;use RedBeanPHP\Adapter\DBAdapter as DBAdapter;use RedBeanPHP\AssociationManager as AssociationManager;use RedBeanPHP\TagManager as TagManager;use RedBeanPHP\DuplicationManager as DuplicationManager;use RedBeanPHP\LabelMaker as LabelMaker;use RedBeanPHP\Finder as Finder;use RedBeanPHP\RedException\SQL as SQLException;use RedBeanPHP\RedException\Security as Security;use RedBeanPHP\Logger as Logger;use RedBeanPHP\Logger\RDefault as RDefault;use RedBeanPHP\Logger\RDefault\Debug as Debug;use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\SimpleModel as SimpleModel;use RedBeanPHP\SimpleModelHelper as SimpleModelHelper;use RedBeanPHP\Adapter as Adapter;use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;use RedBeanPHP\RedException as RedException;use RedBeanPHP\BeanHelper\SimpleFacadeBeanHelper as SimpleFacadeBeanHelper;use RedBeanPHP\Driver\RPDO as RPDO;class Facade{const C_REDBEANPHP_VERSION='4.2';public static $toolbox;private static $redbean;private static $writer;private static $adapter;private static $associationManager;private static $tagManager;private static $duplicationManager;private static $labelMaker;private static $finder;private static $logger;private static $plugins=array();private static $exportCaseStyle='default';public static $f;public static $currentDB='';public static $toolboxes=array();private static function query($method,$sql,$bindings){if(!self::$redbean->isFrozen()){try{$rs=Facade::$adapter->$method($sql,$bindings);}catch(SQLException $exception){if(self::$writer->sqlStateIn($exception->getSQLState(),array(QueryWriter::C_SQLSTATE_NO_SUCH_COLUMN,QueryWriter::C_SQLSTATE_NO_SUCH_TABLE))){return($method==='getCell')?NULL:array();}else{throw $exception;}}return $rs;}else{return Facade::$adapter->$method($sql,$bindings);}}public static function getVersion(){return self::C_REDBEANPHP_VERSION;}public static function testConnection(){if(!isset(self::$adapter))return FALSE;$database=self::$adapter->getDatabase();try{@$database->connect();}catch(\Exception $e){}return $database->isConnected();}public static function setup($dsn=NULL,$username=NULL,$password=NULL,$frozen=FALSE){if(is_null($dsn)){$dsn='sqlite:/'.sys_get_temp_dir().'/red.db';}self::addDatabase('default',$dsn,$username,$password,$frozen);self::selectDatabase('default');return self::$toolbox;}public static function setNarrowFieldMode($mode){AQueryWriter::setNarrowFieldMode($mode);}public static function transaction($callback){if(!is_callable($callback)){throw new RedException('R::transaction needs a valid callback.');}static $depth=0;$result=null;try{if($depth==0){self::begin();}$depth++;$result=call_user_func($callback);$depth--;if($depth==0){self::commit();}}catch(\Exception $exception){$depth--;if($depth==0){self::rollback();}throw $exception;}return $result;}public static function addDatabase($key,$dsn,$user=NULL,$pass=NULL,$frozen=FALSE){if(isset(self::$toolboxes[$key])){throw new RedException('A database has already be specified for this key.');}if(is_object($dsn)){$db=new RPDO($dsn);$dbType=$db->getDatabaseType();}else{$db=new RPDO($dsn,$user,$pass,TRUE);$dbType=substr($dsn,0,strpos($dsn,':'));}$adapter=new DBAdapter($db);$writers=array('pgsql'=>'PostgreSQL','sqlite'=>'SQLiteT','cubrid'=>'CUBRID','mysql'=>'MySQL','sqlsrv'=>'SQLServer',);$wkey=trim(strtolower($dbType));if(!isset($writers[$wkey]))trigger_error('Unsupported DSN: '.$wkey);$writerClass='\\RedBeanPHP\\QueryWriter\\'.$writers[$wkey];$writer=new $writerClass($adapter);$redbean=new OODB($writer,$frozen);self::$toolboxes[$key]=new ToolBox($redbean,$adapter,$writer);}public static function selectDatabase($key){if(self::$currentDB===$key){return FALSE;}self::configureFacadeWithToolbox(self::$toolboxes[$key]);self::$currentDB=$key;return TRUE;}public static function debug($tf=TRUE,$mode=0){if($mode>1){$mode-=2;$logger=new Debug;}else{$logger=new RDefault;}if(!isset(self::$adapter)){throw new RedException('Use R::setup() first.');}$logger->setMode($mode);self::$adapter->getDatabase()->setDebugMode($tf,$logger);return $logger;}public static function fancyDebug($toggle){self::debug($toggle,2);}public static function inspect($type=NULL){return($type===NULL)?self::$writer->getTables():self::$writer->getColumns($type);}public static function store($bean){return self::$redbean->store($bean);}public static function freeze($tf=TRUE){self::$redbean->freeze($tf);}public static function loadMulti($types,$id){if(is_string($types)){$types=explode(',',$types);}if(!is_array($types)){return array();}foreach($types as $k=>$typeItem){$types[$k]=self::$redbean->load($typeItem,$id);}return $types;}public static function load($type,$id){return self::$redbean->load($type,$id);}public static function trash($beanOrType,$id=NULL){if(is_string($beanOrType))return self::trash(self::load($beanOrType,$id));return self::$redbean->trash($beanOrType);}public static function dispense($typeOrBeanArray,$num=1,$alwaysReturnArray=FALSE){if(is_array($typeOrBeanArray)){if(!isset($typeOrBeanArray['_type'])){$list=array();foreach($typeOrBeanArray as $beanArray)if(!(is_array($beanArray)&&isset($beanArray['_type'])))throw new RedException('Invalid Array Bean');foreach($typeOrBeanArray as $beanArray)$list[]=self::dispense($beanArray);return $list;}$import=$typeOrBeanArray;$type=$import['_type'];unset($import['_type']);}else{$type=$typeOrBeanArray;}if(!preg_match('/^[a-z0-9]+$/',$type)){throw new RedException('Invalid type: '.$type);}$beanOrBeans=self::$redbean->dispense($type,$num,$alwaysReturnArray);if(isset($import)){$beanOrBeans->import($import);}return $beanOrBeans;}public static function dispenseAll($order,$onlyArrays=FALSE){$list=array();foreach(explode(',',$order)as $order){if(strpos($order,'*')!==false){list($type,$amount)=explode('*',$order);}else{$type=$order;$amount=1;}$list[]=self::dispense($type,$amount,$onlyArrays);}return $list;}public static function findOrDispense($type,$sql=NULL,$bindings=array()){return self::$finder->findOrDispense($type,$sql,$bindings);}public static function find($type,$sql=NULL,$bindings=array()){return self::$finder->find($type,$sql,$bindings);}public static function findAll($type,$sql=NULL,$bindings=array()){return self::$finder->find($type,$sql,$bindings);}public static function findAndExport($type,$sql=NULL,$bindings=array()){return self::$finder->findAndExport($type,$sql,$bindings);}public static function findOne($type,$sql=NULL,$bindings=array()){return self::$finder->findOne($type,$sql,$bindings);}public static function findLast($type,$sql=NULL,$bindings=array()){return self::$finder->findLast($type,$sql,$bindings);}public static function findCollection($type,$sql=NULL,$bindings=array()){return self::$finder->findCollection($type,$sql,$bindings);}public static function findMulti($types,$sql,$bindings=array(),$remappings=array()){return self::$finder->findMulti($types,$sql,$bindings,$remappings);}public static function batch($type,$ids){return self::$redbean->batch($type,$ids);}public static function loadAll($type,$ids){return self::$redbean->batch($type,$ids);}public static function exec($sql,$bindings=array()){return self::query('exec',$sql,$bindings);}public static function getAll($sql,$bindings=array()){return self::query('get',$sql,$bindings);}public static function getCell($sql,$bindings=array()){return self::query('getCell',$sql,$bindings);}public static function getRow($sql,$bindings=array()){return self::query('getRow',$sql,$bindings);}public static function getCol($sql,$bindings=array()){return self::query('getCol',$sql,$bindings);}public static function getAssoc($sql,$bindings=array()){return self::query('getAssoc',$sql,$bindings);}public static function getAssocRow($sql,$bindings=array()){return self::query('getAssocRow',$sql,$bindings);}public static function getInsertID(){return self::$adapter->getInsertID();}public static function dup($bean,$trail=array(),$pid=FALSE,$filters=array()){self::$duplicationManager->setFilters($filters);return self::$duplicationManager->dup($bean,$trail,$pid);}public static function duplicate($bean,$filters=array()){return self::dup($bean,array(),FALSE,$filters);}public static function exportAll($beans,$parents=FALSE,$filters=array()){return self::$duplicationManager->exportAll($beans,$parents,$filters,self::$exportCaseStyle);}public static function useExportCase($caseStyle='default'){if(!in_array($caseStyle,array('default','camel','dolphin')))throw new RedException('Invalid case selected.');self::$exportCaseStyle=$caseStyle;}public static function convertToBeans($type,$rows){return self::$redbean->convertToBeans($type,$rows);}public static function hasTag($bean,$tags,$all=FALSE){return self::$tagManager->hasTag($bean,$tags,$all);}public static function untag($bean,$tagList){self::$tagManager->untag($bean,$tagList);}public static function tag(OODBBean $bean,$tagList=NULL){return self::$tagManager->tag($bean,$tagList);}public static function addTags(OODBBean $bean,$tagList){self::$tagManager->addTags($bean,$tagList);}public static function tagged($beanType,$tagList,$sql='',$bindings=array()){return self::$tagManager->tagged($beanType,$tagList,$sql,$bindings);}public static function taggedAll($beanType,$tagList,$sql='',$bindings=array()){return self::$tagManager->taggedAll($beanType,$tagList,$sql,$bindings);}public static function wipe($beanType){return Facade::$redbean->wipe($beanType);}public static function count($type,$addSQL='',$bindings=array()){return Facade::$redbean->count($type,$addSQL,$bindings);}public static function configureFacadeWithToolbox(ToolBox $tb){$oldTools=self::$toolbox;self::$toolbox=$tb;self::$writer=self::$toolbox->getWriter();self::$adapter=self::$toolbox->getDatabaseAdapter();self::$redbean=self::$toolbox->getRedBean();self::$finder=new Finder(self::$toolbox);self::$associationManager=new AssociationManager(self::$toolbox);self::$redbean->setAssociationManager(self::$associationManager);self::$labelMaker=new LabelMaker(self::$toolbox);$helper=new SimpleModelHelper();$helper->attachEventListeners(self::$redbean);self::$redbean->setBeanHelper(new SimpleFacadeBeanHelper);self::$duplicationManager=new DuplicationManager(self::$toolbox);self::$tagManager=new TagManager(self::$toolbox);return $oldTools;}public static function begin(){if(!self::$redbean->isFrozen())return FALSE;self::$adapter->startTransaction();return TRUE;}public static function commit(){if(!self::$redbean->isFrozen())return FALSE;self::$adapter->commit();return TRUE;}public static function rollback(){if(!self::$redbean->isFrozen())return FALSE;self::$adapter->rollback();return TRUE;}public static function getColumns($table){return self::$writer->getColumns($table);}public static function genSlots($array,$template=NULL){$str=count($array)?implode(',',array_fill(0,count($array),'?')):'';return(is_null($template)||$str==='')?$str:sprintf($template,$str);}public static function flat($array,$result=array()){foreach($array as $value){if(is_array($value))$result=self::flat($value,$result);else $result[]=$value;}return $result;}public static function nuke(){if(!self::$redbean->isFrozen()){self::$writer->wipeAll();}}public static function storeAll($beans){$ids=array();foreach($beans as $bean){$ids[]=self::store($bean);}return $ids;}public static function trashAll($beans){foreach($beans as $bean){self::trash($bean);}}public static function useWriterCache($yesNo){self::getWriter()->setUseCache($yesNo);}public static function dispenseLabels($type,$labels){return self::$labelMaker->dispenseLabels($type,$labels);}public static function enum($enum){return self::$labelMaker->enum($enum);}public static function gatherLabels($beans){return self::$labelMaker->gatherLabels($beans);}public static function close(){if(isset(self::$adapter)){self::$adapter->close();}}public static function isoDate($time=NULL){if(!$time){$time=time();}return@date('Y-m-d',$time);}public static function isoDateTime($time=NULL){if(!$time)$time=time();return@date('Y-m-d H:i:s',$time);}public static function setDatabaseAdapter(Adapter $adapter){self::$adapter=$adapter;}public static function setWriter(QueryWriter $writer){self::$writer=$writer;}public static function setRedBean(OODB $redbean){self::$redbean=$redbean;}public static function getDatabaseAdapter(){return self::$adapter;}public static function getDuplicationManager(){return self::$duplicationManager;}public static function getWriter(){return self::$writer;}public static function getRedBean(){return self::$redbean;}public static function getToolBox(){return self::$toolbox;}public static function getExtractedToolbox(){return array(self::$redbean,self::$adapter,self::$writer,self::$toolbox);}public static function renameAssociation($from,$to=NULL){AQueryWriter::renameAssociation($from,$to);}public static function beansToArray($beans){$list=array();foreach($beans as $bean){$list[]=$bean->export();}return $list;}public static function setErrorHandlingFUSE($mode,$func=NULL){return OODBBean::setErrorHandlingFUSE($mode,$func);}public static function dump($data){$array=array();if($data instanceof OODBBean){$str=strval($data);if(strlen($str)>35){$beanStr=substr($str,0,35).'... ';}else{$beanStr=$str;}return $beanStr;}if(is_array($data)){foreach($data as $key=>$item){$array[$key]=self::dump($item);}}return $array;}public static function bindFunc($mode,$field,$function){self::$redbean->bindFunc($mode,$field,$function);}public static function aliases($list){OODBBean::aliases($list);}public static function findOrCreate($type,$like=array()){return self::$finder->findOrCreate($type,$like);}public static function findLike($type,$like=array(),$sql=''){return self::$finder->findLike($type,$like,$sql);}public static function startLogging(){self::debug(TRUE,RDefault::C_LOGGER_ARRAY);}public static function stopLogging(){self::debug(FALSE);}public static function getLogs(){return self::getLogger()->getLogs();}public static function resetQueryCount(){self::$adapter->getDatabase()->resetCounter();}public static function getQueryCount(){return self::$adapter->getDatabase()->getQueryCount();}public static function getLogger(){return self::$adapter->getDatabase()->getLogger();}public static function setAutoResolve($automatic=TRUE){OODBBean::setAutoResolve((boolean) $automatic);}public static function ext($pluginName,$callable){if(!ctype_alnum($pluginName)){throw new RedException('Plugin name may only contain alphanumeric characters.');}self::$plugins[$pluginName]=$callable;}public static function __callStatic($pluginName,$params){if(!ctype_alnum($pluginName)){throw new RedException('Plugin name may only contain alphanumeric characters.');}if(!isset(self::$plugins[$pluginName])){throw new RedException('Plugin \''.$pluginName.'\' does not exist, add this plugin using: R::ext(\''.$pluginName.'\')');}return call_user_func_array(self::$plugins[$pluginName],$params);}}}namespace RedBeanPHP{use RedBeanPHP\ToolBox as ToolBox;use RedBeanPHP\AssociationManager as AssociationManager;use RedBeanPHP\OODB as OODB;use RedBeanPHP\OODBBean as OODBBean;use RedBeanPHP\QueryWriter\AQueryWriter as AQueryWriter;class DuplicationManager{protected $toolbox;protected $associationManager;protected $redbean;protected $tables=array();protected $columns=array();protected $filters=array();protected $cacheTables=FALSE;private function copySharedBeans(OODBBean $copy,$shared,$beans){$copy->$shared=array();foreach($beans as $subBean){array_push($copy->$shared,$subBean);}}private function copyOwnBeans(OODBBean $copy,$owned,$beans,$trail,$preserveIDs){$copy->$owned=array();foreach($beans as $subBean){array_push($copy->$owned,$this->duplicate($subBean,$trail,$preserveIDs));}}private function createCopy(OODBBean $bean){$type=$bean->getMeta('type');$copy=$this->redbean->dispense($type);$copy->setMeta('sys.dup-from-id',$bean->id);$copy->setMeta('sys.old-id',$bean->id);$copy->importFrom($bean);$copy->id=0;return $copy;}private function inTrailOrAdd(&$trail,OODBBean $bean){$type=$bean->getMeta('type');$key=$type.$bean->getID();if(isset($trail[$key])){return TRUE;}$trail[$key]=$bean;return FALSE;}private function getListNames($typeName){$owned='own'.ucfirst($typeName);$shared='shared'.ucfirst($typeName);return array($owned,$shared);}protected function hasOwnList($type,$target){return isset($this->columns[$target][$type.'_id']);}protected function hasSharedList($type,$target){return in_array(AQueryWriter::getAssocTableFormat(array($type,$target)),$this->tables);}protected function duplicate(OODBBean $bean,$trail=array(),$preserveIDs=FALSE){if($this->inTrailOrAdd($trail,$bean))return $bean;$type=$bean->getMeta('type');$copy=$this->createCopy($bean);foreach($this->tables as $table){if(!empty($this->filters)){if(!in_array($table,$this->filters))continue;}list($owned,$shared)=$this->getListNames($table);if($this->hasSharedList($type,$table)){if($beans=$bean->$shared){$this->copySharedBeans($copy,$shared,$beans);}}elseif($this->hasOwnList($type,$table)){if($beans=$bean->$owned){$this->copyOwnBeans($copy,$owned,$beans,$trail,$preserveIDs);}$copy->setMeta('sys.shadow.'.$owned,NULL);}$copy->setMeta('sys.shadow.'.$shared,NULL);}$copy->id=($preserveIDs)?$bean->id:$copy->id;return $copy;}public function __construct(ToolBox $toolbox){$this->toolbox=$toolbox;$this->redbean=$toolbox->getRedBean();$this->associationManager=$this->redbean->getAssociationManager();}public function camelfy($array,$dolphinMode=false){$newArray=array();foreach($array as $key=>$element){$newKey=preg_replace_callback('/_(\w)/',function(&$matches){return strtoupper($matches[1]);},$key);if($dolphinMode){$newKey=preg_replace('/(\w)Id$/','$1ID',$newKey);}$newArray[$newKey]=(is_array($element))?$this->camelfy($element,$dolphinMode):$element;}return $newArray;}public function setTables($tables){foreach($tables as $key=>$value){if(is_numeric($key)){$this->tables[]=$value;}else{$this->tables[]=$key;$this->columns[$key]=$value;}}$this->cacheTables=TRUE;}public function getSchema(){return $this->columns;}public function setCacheTables($yesNo){$this->cacheTables=$yesNo;}public function setFilters($filters){if(!is_array($filters)){$filters=array($filters);}$this->filters=$filters;}public function dup(OODBBean $bean,$trail=array(),$preserveIDs=FALSE){if(!count($this->tables)){$this->tables=$this->toolbox->getWriter()->getTables();}if(!count($this->columns)){foreach($this->tables as $table){$this->columns[$table]=$this->toolbox->getWriter()->getColumns($table);}}$rs=$this->duplicate((clone $bean),$trail,$preserveIDs);if(!$this->cacheTables){$this->tables=array();$this->columns=array();}return $rs;}public function exportAll($beans,$parents=FALSE,$filters=array(),$caseStyle='snake'){$array=array();if(!is_array($beans)){$beans=array($beans);}foreach($beans as $bean){$this->setFilters($filters);$duplicate=$this->dup($bean,array(),TRUE);$array[]=$duplicate->export(FALSE,$parents,FALSE,$filters);}if($caseStyle==='camel')$array=$this->camelfy($array);if($caseStyle==='dolphin')$array=$this->camelfy($array,true);return $array;}}}namespace RedBeanPHP{interface Plugin{};}namespace{class RedBean_SimpleModel extends\RedBeanPHP\SimpleModel{};if(!class_exists('R')){class R extends\RedBeanPHP\Facade{};}if(!function_exists('EID')){function EID($enumName){return\RedBeanPHP\Facade::enum($enumName)->id;}}if(!function_exists('dump')){function dmp($list){print_r(\RedBeanPHP\Facade::dump($list));}}if(!function_exists('genslots')){function genslots($slots,$tpl=NULL){return\RedBeanPHP\Facade::genSlots($slots,$tpl);}}if(!function_exists('array_flatten')){function array_flatten($array){return\RedBeanPHP\Facade::flat($array);}}}